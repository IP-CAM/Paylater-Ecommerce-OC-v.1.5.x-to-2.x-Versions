#!/bin/bash
VAULT_EXEC=./.bin.db/vault

export VAULT_ADDR="{{ secrets.vault.host }}"
{% if secrets.vault.tls.enabled %}
export VAULT_CACERT={{ dbctl_vault_ca_cert_file }}
export VAULT_CLIENT_CERT={{ dbctl_vault_cert_file }}
export VAULT_CLIENT_KEY={{ dbctl_vault_key_file }}
export VAULT_TOKEN={{ dbctl_vault_token }}
{% endif %}

echo "[DBCTL] Generating role configuration script for {{ role_name }} using DB {{ db_identifier_path }}/config/root"

# v11-alt write - for Vault > 1.1.0
# echo "==> v11-alt write - for Vault > 1.1.0"
# $VAULT_EXEC write {{ db_identifier_path }}/roles/{{ db_role_name }} \
#  db_name=root \
#  creation_statements=@"{{ db_role_creation_file }}" \
#    default_ttl="1h" \
#    max_ttl="24h"

# v11 write - for Vault > 1.1.0
# echo "==> v11 write - for Vault > 1.1.0"
if [[ -f "{{ db_role_revocation_file }}" ]]; then
    $VAULT_EXEC write {{ db_identifier_path }}/roles/{{ db_role_name }} \
      db_name=root \
      creation_statements=@"{{ db_role_creation_file }}" \
      revocation_statements=@"{{ db_role_revocation_file }}" \
        default_ttl="1h" \
        max_ttl="24h"
else
    $VAULT_EXEC write {{ db_identifier_path }}/roles/{{ db_role_name }} \
      db_name=root \
      creation_statements=@"{{ db_role_creation_file }}" \
        default_ttl="1h" \
        max_ttl="24h"
fi


# v10 write - for Vault < 1.1.0
# echo "==> v10 write - for Vault < 1.1.0"
# $VAULT_EXEC write {{ v10_db_identifier_path_namespace }}/roles/{{ v10_db_identifier_path_key }}-{{ db_role_name }} \
#  db_name={{ v10_db_identifier_path_key }} \
#  creation_statements=@"{{ db_role_creation_file }}" \
#    default_ttl="1h" \
#    max_ttl="24h"

#!/bin/bash
DB_HOST="{{ db.hosted.db_host | default('localhost') }}"
DB_PORT="{{ db.hosted.db_port | default('3306') }}"
CONNECTION_STRING="{{ db_generated_user }}:{{ db_generated_password }}@tcp(${DB_HOST}:${DB_PORT})/{{ db_name }}"

VAULT_EXEC=./.bin.db/vault
YQ_EXEC=./.bin.db/yq

export VAULT_ADDR="{{ secrets.vault.host }}"
{% if secrets.vault.tls.enabled %}
export VAULT_CACERT={{ dbctl_vault_ca_cert_file }}
export VAULT_CLIENT_CERT={{ dbctl_vault_cert_file }}
export VAULT_CLIENT_KEY={{ dbctl_vault_key_file }}
export VAULT_TOKEN={{ dbctl_vault_token }}
{% endif %}

$VAULT_EXEC secrets list -format=yaml > vault.secrets.list.yaml

# DB_SECRET_ENGINE=$($YQ_EXEC r vault.secrets.list.yaml "[{{ db_identifier_path }}/]")
# if [[ $DB_SECRET_ENGINE == "null" ]]; then
#     echo "[DBCTL] Enabling secrets - v0"
#     $VAULT_EXEC secrets enable -path={{ db_identifier_path }} database
# fi

# DB_SECRET_ENGINE_v10=$($YQ_EXEC r vault.secrets.list.yaml "[{{ v10_db_identifier_path_namespace }}/]")
# if [[ $DB_SECRET_ENGINE_v10 == "null" ]]; then
#     echo "[DBCTL] Enabling secrets - v1.0"
#     $VAULT_EXEC secrets enable -path={{ v10_db_identifier_path_namespace }} database
# fi

DB_SECRET_ENGINE_v11=$($YQ_EXEC r vault.secrets.list.yaml "[{{ v11_db_identifier_path }}/]")
if [[ $DB_SECRET_ENGINE_v11 == "null" ]]; then
    echo "[DBCTL] Enabling secrets - v1.1"
    $VAULT_EXEC secrets enable -path={{ v11_db_identifier_path }} database
fi

# echo "[DBCTL] Configuring secrets v11-alt - path: {{ db_identifier_path }}/config/root"
# $VAULT_EXEC write {{ db_identifier_path }}/config/root \
#   plugin_name=mysql-database-plugin \
#   allowed_roles="*" \
#   connection_url="${CONNECTION_STRING}" \
#   verify_connection=false

echo "[DBCTL] Configuring secrets v11 - path: {{ v11_db_identifier_path }}/config/root"
$VAULT_EXEC write {{ v11_db_identifier_path }}/config/root \
  plugin_name=mysql-database-plugin \
  allowed_roles="*" \
  connection_url="${CONNECTION_STRING}" \
  verify_connection=false

# echo "[DBCTL] Configuring secrets v10 - path: {{ v10_db_identifier_path_namespace }}/config/{{ v10_db_identifier_path_key }}"
# $VAULT_EXEC write {{ v10_db_identifier_path_namespace }}/config/{{ v10_db_identifier_path_key }} \
#   plugin_name=mysql-database-plugin \
#   allowed_roles="*" \
#   connection_url="${CONNECTION_STRING}" \
#   verify_connection=false

if [ $? -eq 0 ]; then
    # echo "[DBCTL] v11-alt - Generating role configuration script for migrations using DB {{ db_identifier_path }}/config/root"
    # $VAULT_EXEC write {{ db_identifier_path }}/roles/migrations \
    #     db_name=root \
    #     creation_statements=@"{{ db_directory }}/sql/__roles__/migrations/creation.sql" \
    #         default_ttl="1h" \
    #         max_ttl="24h"

    echo "[DBCTL] v11 - Generating role configuration script for migrations using DB {{ v11_db_identifier_path }}/config/root"
    $VAULT_EXEC write {{ v11_db_identifier_path }}/roles/migrations \
        db_name=root \
        creation_statements=@"{{ db_directory }}/sql/__roles__/migrations/creation.sql" \
            default_ttl="1h" \
            max_ttl="24h"

    # echo "[DBCTL] v10 - Generating role configuration script for migrations using DB {{ v10_db_identifier_path_namespace }}/config/{{ v10_db_identifier_path_key }}"
    # $VAULT_EXEC write {{ v10_db_identifier_path_namespace }}/roles/{{ v10_db_identifier_path_key }}-migrations \
    #     db_name={{ v10_db_identifier_path_key }} \
    #     creation_statements=@"{{ db_directory }}/sql/__roles__/migrations/creation.sql" \
    #         default_ttl="1h" \
    #         max_ttl="24h"
    
    if [ $? -eq 0 ]; then
        echo "SUCCESS" > VAULTUPLOADOUTPUT
    else
        echo "FAILED" > VAULTUPLOADOUTPUT
    fi
else
    echo "FAILED" > VAULTUPLOADOUTPUT
fi
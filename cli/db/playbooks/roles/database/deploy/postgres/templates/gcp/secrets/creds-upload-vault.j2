#!/bin/bash
JQ=./.bin.db/jq
YQ=./.bin.db/yq

DB_HOST=$(cat gcp_db.json | $JQ -r .gcp_db_private_ip.value)
DB_USER=$(cat gcp_db.json | $JQ -r .gcp_db_user.value)
DB_PORT=$(cat gcp_db.json | $JQ -r .gcp_db_private_port.value)
DB_PASSWORD=$(cat PGPASSWORD)

SSH_TUNNEL_ENABLED={% filter lower %}{{ db.gcp.db_provider_option.ssh_tunnel.enabled }}{% endfilter %}

if [[ "$SSH_TUNNEL_ENABLED" == "true" ]]; then
  CONNECTION_STRING="postgresql://{{ db_generated_user }}:{{ db_generated_password }}@127.0.0.1:{{ db.gcp.db_provider_option.ssh_tunnel.tunnel_port }}/{{ db_name }}?sslmode=disable"
else
  CONNECTION_STRING="postgresql://{{ db_generated_user }}:{{ db_generated_password }}@${DB_HOST}:${DB_PORT}/{{ db_name }}"
fi

PUBLIC_CONNECTION_ENABLED={% filter lower %}{{ db.gcp.db_provider_option.public_connection.enabled }}{% endfilter %}

if [[ "$PUBLIC_CONNECTION_ENABLED" == "true" ]]; then
  DB_HOST=$(cat gcp_db.json | $JQ -r .gcp_db_public_ip.value)
  DB_PORT=$(cat gcp_db.json | $JQ -r .gcp_db_public_port.value)
  CONNECTION_STRING="postgresql://{{ db_generated_user }}:{{ db_generated_password }}@${DB_HOST}:${DB_PORT}/{{ db_name }}"
fi

VAULT_EXEC=./.bin.db/vault

export VAULT_ADDR="{{ secrets.vault.host }}"
{% if secrets.vault.tls.enabled %}
export VAULT_CACERT={{ dbctl_vault_ca_cert_file }}
export VAULT_CLIENT_CERT={{ dbctl_vault_cert_file }}
export VAULT_CLIENT_KEY={{ dbctl_vault_key_file }}
export VAULT_TOKEN={{ dbctl_vault_token }}
{% endif %}

$VAULT_EXEC secrets list -format=yaml > vault.secrets.list.yaml

DB_SECRET_ENGINE_v11=$($YQ r vault.secrets.list.yaml "[{{ v11_db_identifier_path }}/]")
if [[ $DB_SECRET_ENGINE_v11 == "null" ]]; then
    echo "[DBCTL] Enabling secrets - v1.1"
    $VAULT_EXEC secrets enable -path={{ v11_db_identifier_path }} database
fi
echo $CONNECTION_STRING
echo "[DBCTL] Configuring secrets v11 - path: {{ v11_db_identifier_path }}/config/root"
$VAULT_EXEC write {{ v11_db_identifier_path }}/config/root \
  plugin_name=postgresql-database-plugin \
  allowed_roles="*" \
  connection_url="${CONNECTION_STRING}" \
  verify_connection=false

if [ $? -eq 0 ]; then
    echo "[DBCTL] v11 - Generating role configuration script for migrations using DB {{ v11_db_identifier_path }}/config/root"
    $VAULT_EXEC write {{ v11_db_identifier_path }}/roles/migrations \
        db_name=root \
        creation_statements=@"{{ db_directory }}/sql/__roles__/migrations/creation.sql" \
            default_ttl="1h" \
            max_ttl="24h"

    echo "SUCCESS" > VAULTUPLOADOUTPUT
else
    echo "FAILED" > VAULTUPLOADOUTPUT
fi

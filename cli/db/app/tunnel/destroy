#!/bin/bash
set -e
trap "exit" INT

source ./db/app/meta 
source ./db/app/namespace 

yq=./.bin.db/yq
jq=./.bin.db/jq

CURRENT_DIRECTORY=$(pwd)

pushd () {
    command pushd "$@" &> /dev/null
}

popd () {
    command popd "$@" &> /dev/null
}

function destroy-ssh-tunnel {
  local SSH_TUNNEL_INSTANCE_FILE=$1
  local SSH_TUNNEL_HOST=$2

  echo -e "${GREEN}[DBCTL]${NC} Destroying SSH tunnel"
  pushd ${DB_DIRECTORY}
    ssh -S ${SSH_TUNNEL_INSTANCE_FILE} -O exit ${SSH_TUNNEL_HOST}
  popd
  echo -e "${GREEN}[DBCTL]${NC} SSH tunnel destroyed"
}

function setup-apsara-ssh-configuration {
  local DB_NAME=$1
  local DB_TYPE=$2
  local ENVIRONMENT=$3
  local DB_DEPLOYMENT_TYPE="apsara"

  local BLUEPRINT_DIRECTORY=${CURRENT_DIRECTORY}/db/blueprint
  local BLUEPRINT_DATABASE_FILE=${BLUEPRINT_DIRECTORY}/${DB_TYPE}/${DB_NAME}/${ENVIRONMENT}.yml
  local IDENTIFIER=${DB_DEPLOYMENT_TYPE}.${DB_TYPE}.${ORGANIZATION}.${TEAM}.${PRODUCT}.${DB_NAME}.${ENVIRONMENT}
  local DB_DIRECTORY=${CURRENT_DIRECTORY}/.run.db/${IDENTIFIER}
  
  echo -e "${GREEN}[DBCTL]${NC} Reading SSH Tunnel Specification for ApsaraDB"
  SSH_ENABLED=$($yq r $BLUEPRINT_DATABASE_FILE 'db.apsara.db_provider_option.ssh_tunnel.enabled')
  if [[ "$SSH_ENABLED" == "false" ]]; then
    exit 3
  fi

  local SSH_TUNNEL_HOST=$($yq r $BLUEPRINT_DATABASE_FILE 'db.apsara.db_provider_option.ssh_tunnel.tunnel_host')
  local SSH_TUNNEL_PORT=$($yq r $BLUEPRINT_DATABASE_FILE 'db.apsara.db_provider_option.ssh_tunnel.tunnel_port')

  pushd ${DB_DIRECTORY}
    local SSH_TUNNEL_INSTANCE_FILE=apsara-tunnel-${SSH_TUNNEL_PORT}
    if [[ ! -S ${SSH_TUNNEL_INSTANCE_FILE} ]]; then
      echo -e "${YELLOW}[WARNING]${NC} SSH Tunnel doesn't exist. Exiting SSH tunnel deletion process..."
      exit 0
    fi
  popd

  local APSARA_DB_CONFIG_FILE=${DB_DIRECTORY}/apsara_db.json
  local SSH_TARGET_HOST=$(cat $APSARA_DB_CONFIG_FILE | $jq -r .apsara_db_host.value)
  local SSH_TARGET_PORT=$(cat $APSARA_DB_CONFIG_FILE | $jq -r .apsara_db_port.value)

  destroy-ssh-tunnel ${SSH_TUNNEL_INSTANCE_FILE} ${SSH_TUNNEL_HOST}
}

function setup-ssh-configuration {
  local DB_NAME=$1
  local DB_TYPE=$2
  local ENVIRONMENT=$3

  local BLUEPRINT_DIRECTORY=${CURRENT_DIRECTORY}/db/blueprint
  local BLUEPRINT_DATABASE_FILE=${BLUEPRINT_DIRECTORY}/${DB_TYPE}/${DB_NAME}/${ENVIRONMENT}.yml
  local IDENTIFIER=${DB_DEPLOYMENT_TYPE}.${DB_TYPE}.${ORGANIZATION}.${TEAM}.${PRODUCT}.${DB_NAME}.${ENVIRONMENT}
  local DB_DIRECTORY=${CURRENT_DIRECTORY}/.run.db/${IDENTIFIER}

  if [[ ! -f $BLUEPRINT_DATABASE_FILE ]]; then
    echo -e "${RED}[ERROR]${NC} Database configuration file NOT FOUND"
    exit 1
  fi

  echo -e "${GREEN}[DBCTL]${NC} Reading DB configuration to check connection type"
  local DB_DEPLOYMENT_TYPE=$($yq r ${BLUEPRINT_DATABASE_FILE} 'db.deployment')
  if [[ "${DB_DEPLOYMENT_TYPE}" == "apsara" ]]; then
    SSH_ENABLED=$($yq r $BLUEPRINT_DATABASE_FILE 'db.apsara.db_provider_option.ssh_tunnel.enabled')
    if [[ "${SSH_ENABLED}" != "true" ]]; then
      echo -e "${YELLOW}[DBCTL]${NC} SSH Tunnel is not enabled. Will exist gracefully"
      exit 1
    fi
    setup-apsara-ssh-configuration ${DB_NAME} ${DB_TYPE} ${ENVIRONMENT}
  fi
}

if [ $# == 0 ]; then
    exit 3
fi

if [[ " ${1} " == *"help"* ]] || [[ " ${1} " == *"--help"* ]];then
    exit 3
else
    if [[ -z "$1" ]] || [[ -z "$2" ]]; then
        exit 3
    else
        setup-ssh-configuration $1 $2 $3
    fi
fi
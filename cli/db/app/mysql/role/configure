#!/bin/bash
set -e
trap "exit" INT

source ./db/app/meta
source ./db/app/namespace 

yq=./.bin.db/yq
jq=./.bin.db/jq
CURRENT_DIRECTORY=$(pwd)

function configure-role-to-vault {
    DB_DIRECTORY=$1
    echo -e "${YELLOW} NOTE: We will need to synchronize the Database Role to Secrets Management - Vault. Please make sure that the process completed successfully.${NC}"
    sleep "5"
    mkdir -p $DB_DIRECTORY/.bin.db
    cp ./.bin.db/vault $DB_DIRECTORY/.bin.db/vault
    pushd $DB_DIRECTORY
    bash ./role-configure
    popd
}

function db-mysql-role-configure-validate {
  DB_NAME=$1
  ENVIRONMENT=$2
  ROLE_NAME=$3

  local BLUEPRINT_DIRECTORY=$(pwd)/db/blueprint
  local BLUEPRINT_DATABASE_FILE=${BLUEPRINT_DIRECTORY}/mysql/${DB_NAME}/${ENVIRONMENT}.yml
  local BLUEPRINT_ROLES_DIRECTORY=${BLUEPRINT_DIRECTORY}/mysql/${DB_NAME}/__roles__/${ENVIRONMENT}/${ROLE_NAME}
  local BLUEPRINT_ROLES_CREATION_FILE=${BLUEPRINT_DIRECTORY}/mysql/${DB_NAME}/__roles__/${ENVIRONMENT}/${ROLE_NAME}/creation.sql

  if [[ ! -f "${BLUEPRINT_DATABASE_FILE}" ]]; then
    echo -e "${RED}ERROR:${NC} No database specification file found for ${YELLOW}${DB_NAME}/${ENVIRONMENT}.yml${NC}. [${YELLOW}${BLUEPRINT_DATABASE_FILE}${NC}]"
    exit 1
  fi

  if [[ ! -d "${BLUEPRINT_ROLES_DIRECTORY}" ]]; then
    echo -e "${RED}ERROR:${NC} No ROLES specification directory found for ${YELLOW}${DB_NAME}/${ENVIRONMENT}/${ROLE_NAME}${NC}. [${YELLOW}${BLUEPRINT_ROLES_DIRECTORY}${NC}]"
    exit 1
  fi  

  if [[ ! -f "${BLUEPRINT_ROLES_CREATION_FILE}" ]]; then
    echo -e "${RED}ERROR:${NC} No ROLES creation.sql file found for ${YELLOW}${DB_NAME}/${ENVIRONMENT}/${ROLE_NAME}${NC}. [${YELLOW}${BLUEPRINT_ROLES_CREATION_FILE}${NC}]"
    exit 1
  fi
}

function db-mysql-role-configure-execute {
  DB_NAME=$1
  ENVIRONMENT=$2
  ROLE_NAME=$3

  local BLUEPRINT_DIRECTORY=$(pwd)/db/blueprint
  local BLUEPRINT_DATABASE_FILE=${BLUEPRINT_DIRECTORY}/mysql/${DB_NAME}/${ENVIRONMENT}.yml
  local BLUEPRINT_ROLES_DIRECTORY=${BLUEPRINT_DIRECTORY}/mysql/${DB_NAME}/__roles__/${ENVIRONMENT}/${ROLE_NAME}
  local BLUEPRINT_ROLES_CREATION_FILE=${BLUEPRINT_DIRECTORY}/mysql/${DB_NAME}/__roles__/${ENVIRONMENT}/${ROLE_NAME}/creation.sql

  DB_DEPLOYMENT_TYPE=$($yq r $BLUEPRINT_DATABASE_FILE 'db.deployment')
  export IDENTIFIER=${DB_DEPLOYMENT_TYPE}.mysql.${ORGANIZATION}.${TEAM}.${PRODUCT}.${DB_NAME}.${ENVIRONMENT}
  export DB_DIRECTORY=$CURRENT_DIRECTORY/.run.db/${IDENTIFIER}
  mkdir -p ${DB_DIRECTORY}

  cp -r $BLUEPRINT_DIRECTORY/mysql/${DB_NAME}/${ENVIRONMENT}.yml \
    $DB_DIRECTORY/${ENVIRONMENT}.yml

  local VAULT_CERTS_BUNDLE=$($yq r $BLUEPRINT_DATABASE_FILE 'secrets.vault.tls.certs_bundle')
  local VAULT_TLS_ENABLED=$($yq r $BLUEPRINT_DATABASE_FILE 'secrets.vault.tls.enabled')
  local DBCTL_VAULT_CERT_FILE=""
  local DBCTL_VAULT_KEY_FILE=""
  local DBCTL_VAULT_CA_CERT_FILE=""
  if [[ "$VAULT_CERTS_BUNDLE" != "null" ]]; then 
    echo -e "${GREEN}[DBCTL]${NC} Importing PKI Certificate for Secrets Manager (Vault) : [[member]]:${YELLOW}$GITHUB_USERNAME${NC}@[[certs_bundle]]:${YELLOW}$VAULT_CERTS_BUNDLE${NC}"
    $(./pkictl member certs use $VAULT_CERTS_BUNDLE)
    DBCTL_VAULT_CERT_FILE=$PKICTL_MEMBER_CERT_FILE
    DBCTL_VAULT_KEY_FILE=$PKICTL_MEMBER_KEY_FILE
    DBCTL_VAULT_CA_CERT_FILE=$PKICTL_MEMBER_CA_CERT_FILE
  else
    if [[ "$VAULT_TLS_ENABLED" == "true" ]]; then
      echo -e "${RED}[ERROR]${NC} No Vault certs_bundle specified even though Vault TLS is enabled."
      exit 1
    fi
  fi

  local VAULT_LOGIN_CONTEXT=${ORGANIZATION}-${TEAM}-${PRODUCT}-${ENVIRONMENT}    
  local DBCTL_VAULT_TOKEN=""
  ./pkictl vault context login cert $VAULT_LOGIN_CONTEXT
  $(./pkictl vault context get)
  DBCTL_VAULT_TOKEN=$PKICTL_CONTEXT_TOKEN

  ansible-playbook db/playbooks/dbctl-db-role-configure.yml \
      -e "db_engine=mysql" \
      -e "db_deployment_type=$DB_DEPLOYMENT_TYPE" \
      -e "db_name=${DB_NAME}" \
      -e "db_environment=${ENVIRONMENT}" \
      -e "db_directory=${DB_DIRECTORY}" \
      -e "db_role_name=${ROLE_NAME}" \
      -e "db_role_creation_file=${BLUEPRINT_ROLES_CREATION_FILE}" \
      -e "organization=${ORGANIZATION}" \
      -e "team=${TEAM}" \
      -e "product=${PRODUCT}" \
      -e "dbctl_vault_cert_file=${DBCTL_VAULT_CERT_FILE}" \
      -e "dbctl_vault_key_file=${DBCTL_VAULT_KEY_FILE}" \
      -e "dbctl_vault_ca_cert_file=${DBCTL_VAULT_CA_CERT_FILE}" \
      -e "dbctl_vault_token=${DBCTL_VAULT_TOKEN}" 

  configure-role-to-vault $DB_DIRECTORY    
}

if [ $# == 0 ]; then
    exit 3
fi

if [[ " ${1} " == *"help"* ]] || [[ " ${1} " == *"--help"* ]];then
    exit 3
else
    if [[ -z "$1" ]] || [[ -z "$2" ]] || [[ -z "$3" ]]; then
        exit 3
    else
        db-mysql-role-configure-validate $1 $2 $3
        db-mysql-role-configure-execute $1 $2 $3
    fi
fi
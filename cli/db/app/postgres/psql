#!/bin/bash
set -e
trap "exit" INT

source ./db/app/meta
source ./db/app/namespace

yq=./.bin.db/yq
CURRENT_DIRECTORY=$(pwd)

function db-psql-validate {
  local DB_NAME=$1
  local ENVIRONMENT=$2
  local ROLE_NAME=$3

  local BLUEPRINT_DIRECTORY=$(pwd)/db/blueprint
  local BLUEPRINT_DATABASE_FILE=${BLUEPRINT_DIRECTORY}/postgres/${DB_NAME}/${ENVIRONMENT}.yml
  local BLUEPRINT_ROLES_DIRECTORY=${BLUEPRINT_DIRECTORY}/postgres/${DB_NAME}/__roles__/${ENVIRONMENT}/${ROLE_NAME}
  local BLUEPRINT_ROLES_CREATION_FILE=${BLUEPRINT_DIRECTORY}/postgres/${DB_NAME}/__roles__/${ENVIRONMENT}/${ROLE_NAME}/creation.sql
  
  if [[ ! -f "${BLUEPRINT_DATABASE_FILE}" ]]; then
      echo -e "${RED}ERROR:${NC} No database specification file found for ${YELLOW}${DB_NAME}/${ENVIRONMENT}.yml${NC}. [${YELLOW}${BLUEPRINT_DATABASE_FILE}${NC}]"
      exit 1
  fi

  DB_DEPLOYMENT_TYPE=$($yq r $BLUEPRINT_DATABASE_FILE 'db.deployment')
  if [[ "$DB_DEPLOYMENT_TYPE" != "hosted" && "$DB_DEPLOYMENT_TYPE" != "rds" && "$DB_DEPLOYMENT_TYPE" != "apsara" ]]; then
      echo -e "${RED}ERROR:${NC} Deployment type is not supported for ${YELLOW}${DB_NAME}/${ENVIRONMENT}.yml${NC}. [Deployment-Type: ${YELLOW}${DEPLOYMENT_TYPE}${NC} - supported: ${YELLOW}hosted, rds${NC}]"
      exit 1
  fi

  if [[ -z "$GITHUB_USERNAME" ]]; then
    echo -e "${RED}[ERROR]${NC} No GITHUB_USERNAME specified. Please export it to your environment variable."
    exit 1
  fi

  if [[ ! -d "${BLUEPRINT_ROLES_DIRECTORY}" ]]; then
    echo -e "${RED}ERROR:${NC} No ROLES specification directory found for ${YELLOW}${DB_NAME}/${ENVIRONMENT}/${ROLE_NAME}${NC}. [${YELLOW}${BLUEPRINT_ROLES_DIRECTORY}${NC}]"
    exit 1
  fi  

  if [[ ! -f "${BLUEPRINT_ROLES_CREATION_FILE}" ]]; then
    echo -e "${RED}ERROR:${NC} No ROLES creation.sql file found for ${YELLOW}${DB_NAME}/${ENVIRONMENT}/${ROLE_NAME}${NC}. [${YELLOW}${BLUEPRINT_ROLES_CREATION_FILE}${NC}]"
    exit 1
  fi
}

function db-psql-execute {
  local DB_NAME=$1
  local ENVIRONMENT=$2
  local ROLE_NAME=$3
  
  local BLUEPRINT_DIRECTORY=$(pwd)/db/blueprint
  local BLUEPRINT_DATABASE_FILE=${BLUEPRINT_DIRECTORY}/postgres/${DB_NAME}/${ENVIRONMENT}.yml
  local BLUEPRINT_ROLES_DIRECTORY=${BLUEPRINT_DIRECTORY}/postgres/${DB_NAME}/__roles__/${ENVIRONMENT}/${ROLE_NAME}
  local BLUEPRINT_ROLES_CREATION_FILE=${BLUEPRINT_DIRECTORY}/postgres/${DB_NAME}/__roles__/${ENVIRONMENT}/${ROLE_NAME}/creation.sql
  
  DB_DEPLOYMENT_TYPE=$($yq r $BLUEPRINT_DATABASE_FILE 'db.deployment')
  DB_HOST=$($yq r $BLUEPRINT_DATABASE_FILE "db.$DB_DEPLOYMENT_TYPE.db_host")
  export IDENTIFIER=${DB_DEPLOYMENT_TYPE}.postgres.${ORGANIZATION}.${TEAM}.${PRODUCT}.${DB_NAME}.${ENVIRONMENT}
  export DB_DIRECTORY=$CURRENT_DIRECTORY/.run.db/${IDENTIFIER}
  mkdir -p ${DB_DIRECTORY}
  ./dbctl postgres role get-credential $DB_NAME $ENVIRONMENT $ROLE_NAME
  $(./dbctl postgres role use-credential $DB_NAME $ENVIRONMENT $ROLE_NAME)

  local SSH_ENABLED=$($yq r $BLUEPRINT_DATABASE_FILE "db.${DB_DEPLOYMENT_TYPE}.db_provider_option.ssh_tunnel.enabled")
  if [[ ${SSH_ENABLED} == "true" ]]; then
    local SSH_PORT=$($yq r $BLUEPRINT_DATABASE_FILE "db.${DB_DEPLOYMENT_TYPE}.db_provider_option.ssh_tunnel.tunnel_port")
    echo -e "${YELLOW}==========================================================================================${NC}"
    echo -e "${GREEN}[DBCTL]${NC} PSQL Client for - ${YELLOW}127.0.0.1:${SSH_PORT}/${DB_NAME}/${ROLE_NAME}${NC} - "
    echo -e "${YELLOW}==========================================================================================${NC}"
    ./dbctl tunnel create ${DB_NAME} postgres ${ENVIRONMENT}
    PGPASSWORD=$DBCTL_PASSWORD psql -U $DBCTL_USERNAME -d $DB_NAME --host=127.0.0.1 --port=${SSH_PORT}
    ./dbctl tunnel destroy ${DB_NAME} postgres ${ENVIRONMENT}
  else
    # TODO
    # this currently only works on hosted as DB_HOST value will be null if it's not hosted
    echo -e "${YELLOW}==========================================================================================${NC}"
    echo -e "${GREEN}[DBCTL]${NC} PSQL Client for - ${YELLOW}${DB_HOST}/${DB_NAME}/${ROLE_NAME}${NC} - "
    echo -e "${YELLOW}==========================================================================================${NC}"
    PGPASSWORD=$DBCTL_PASSWORD psql -U $DBCTL_USERNAME -d $DB_NAME -h $DB_HOST
  fi
}

if [ $# == 0 ]; then
    exit 3
fi

if [[ " ${1} " == *"help"* ]] || [[ " ${1} " == *"--help"* ]];then
    exit 3
else
    if [[ -z "$1" ]] || [[ -z "$2" ]] || [[ -z "$3" ]]; then
        exit 3
    else
        db-psql-validate $1 $2 $3
        db-psql-execute $1 $2 $3
    fi
fi

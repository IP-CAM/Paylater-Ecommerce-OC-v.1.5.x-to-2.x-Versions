#!/bin/bash

source ./cli/dbctl/app/meta
source ./cli/dbctl/app/namespace

DB_BACKUP_BLUEPRINT_DIRECTORY=$(pwd)/blueprint/db-backup
DB_BOOTSTRAP_BLUEPRINT_DIRECTORY=$(pwd)/blueprint/db-bootstrap
DB_MIGRATE_BLUEPRINT_DIRECTORY=$(pwd)/blueprint/db-migrations
DB_DEPLOY_BLUEPRINT_DIRECTORY=$(pwd)/blueprint/db-deploy

YQ=./.bin/yq

set -e

function db-util-import-validate {
  local DB_ENGINE=$1
  local DB_PROVIDER=$2
  local DB_NAME=$3
  local DB_ENVIRONMENT=$4

  if [[ "$DB_ENGINE" != "postgres" ]]; then
    echo -e "${RED}[ERROR]${NC} Please specify the correct Database Engine. Supported Database Engine: ${YELLOW}postges${NC}"
    exit 1
  fi
  if [[ "$DB_PROVIDER" != "local" ]] && [[ "$DB_PROVIDER" != "rds" ]]; then
    echo -e "${RED}[ERROR]${NC} Please specify the correct Database Provider. Supported Database Provider: ${YELLOW}local|rds${NC}"
    exit 1
  fi
  # Check bootstrap, deploy, migrations
  if [[ ! -d "$DB_BOOTSTRAP_BLUEPRINT_DIRECTORY/$DB_ENGINE/local/$DB_NAME" ]]; then
    echo -e "${RED}[ERROR]${NC} No db-bootstrap directory found for ${YELLOW}$DB_ENGINE/$DB_PROVIDER/$DB_NAME${NC}. Expected: ${YELLOW}[[$DB_BOOTSTRAP_BLUEPRINT_DIRECTORY/$DB_ENGINE/$DB_PROVIDER/$DB_NAME]]${NC}"
    exit 1
  fi
  if [[ ! -d "$DB_MIGRATE_BLUEPRINT_DIRECTORY/$DB_ENGINE/local/$DB_NAME" ]]; then
    echo -e "${RED}[ERROR]${NC} No db-migrations directory found for ${YELLOW}$DB_ENGINE/$DB_PROVIDER/$DB_NAME${NC} Expected: ${YELLOW}[[$DB_MIGRATE_BLUEPRINT_DIRECTORY/$DB_ENGINE/$DB_PROVIDER/$DB_NAME]]${NC}"
    exit 1
  fi
  if [[ "$DB_PROVIDER" == "rds" ]]; then
    if [[ ! -d "$DB_DEPLOY_BLUEPRINT_DIRECTORY/$DB_ENGINE/$DB_PROVIDER/$DB_NAME" ]]; then
      echo -e "${RED}[ERROR]${NC} No db-deploy directory found for ${YELLOW}$DB_ENGINE/$DB_PROVIDER/$DB_NAME${NC} Expected: ${YELLOW}[[$DB_DEPLOY_BLUEPRINT_DIRECTORY/$DB_ENGINE/$DB_PROVIDER/$DB_NAME]]${NC}"
      exit 1
    fi
  fi

  if [[ ! -f "$DB_BOOTSTRAP_BLUEPRINT_DIRECTORY/$DB_ENGINE/$DB_PROVIDER/$DB_NAME/$DB_ENVIRONMENT.yml" ]]; then
    echo -e "${RED}[ERROR]${NC} No db-bootstrap file specification found for ${YELLOW}$DB_ENGINE/$DB_PROVIDER/$DB_NAME/$DB_ENVIRONMENT.yml${NC}."
    echo -e "Expected: ${YELLOW}[[$DB_BOOTSTRAP_BLUEPRINT_DIRECTORY/$DB_ENGINE/$DB_PROVIDER/$DB_NAME/$DB_ENVIRONMENT.yml]]${NC}"
    exit 1
  fi

  if [[ ! -f "$DB_MIGRATE_BLUEPRINT_DIRECTORY/$DB_ENGINE/local/$DB_NAME/env/$DB_ENVIRONMENT.yml" ]]; then
    echo -e "${RED}[ERROR]${NC} No db-migrations file specification found for ${YELLOW}$DB_ENGINE/$DB_PROVIDER/$DB_NAME/env/$DB_ENVIRONMENT.yml${NC}."
    echo -e "Expected: ${YELLOW}[[$DB_MIGRATE_BLUEPRINT_DIRECTORY/$DB_ENGINE/$DB_PROVIDER/$DB_NAME/env/$DB_ENVIRONMENT.yml]]${NC}"
    exit 1
  fi

  if [[ "$DB_PROVIDER" == "rds" ]]; then
    if [[ ! -f "$DB_DEPLOY_BLUEPRINT_DIRECTORY/$DB_ENGINE/$DB_PROVIDER/$DB_NAME/$DB_ENVIRONMENT.yml" ]]; then
      echo -e "${RED}[ERROR]${NC} No db-deploy file specification found for ${YELLOW}$DB_ENGINE/$DB_PROVIDER/$DB_NAME/$DB_ENVIRONMENT${NC}."
      echo -e "Expected: ${YELLOW}[[$DB_DEPLOY_BLUEPRINT_DIRECTORY/$DB_ENGINE/$DB_PROVIDER/$DB_NAME/$DB_ENVIRONMENT.yml]]${NC}"
      exit 1
    fi
  fi

  if [[ -z "$GITHUB_USERNAME" ]]; then
    echo -e "${RED}[ERROR]${NC} No GITHUB_USERNAME specified. Please export it to your environment variable."
    exit 1
  fi
}

function db-util-import-execute {
  local DB_ENGINE=$1
  local DB_PROVIDER=$2
  local DB_NAME=$3
  local DB_ENVIRONMENT=$4

  DB_BLUEPRINT_DIRECTORY=$(pwd)/blueprint/infra-devops/dbctl/db/$DB_ENGINE/$DB_NAME
  mkdir -p $DB_BLUEPRINT_DIRECTORY
  mkdir -p $DB_BLUEPRINT_DIRECTORY/__migrations__
  mkdir -p $DB_BLUEPRINT_DIRECTORY/__roles__
  mkdir -p $DB_BLUEPRINT_DIRECTORY/__roles__/$DB_ENVIRONMENT/app
  mkdir -p $DB_BLUEPRINT_DIRECTORY/__roles__/$DB_ENVIRONMENT/dba
  mkdir -p $DB_BLUEPRINT_DIRECTORY/__roles__/$DB_ENVIRONMENT/readonly
  mkdir -p $DB_BLUEPRINT_DIRECTORY/__roles__/$DB_ENVIRONMENT/migrations

  MIGRATE_SCHEMA=$($YQ r $DB_MIGRATE_BLUEPRINT_DIRECTORY/$DB_ENGINE/local/$DB_NAME/env/$DB_ENVIRONMENT.yml 'db.schema')
  if [[ "$MIGRATE_SCHEMA" == "null" ]]; then
    echo -e "${GREEN}[DBCTL]${NC} Using default schema ${YELLOW}public${NC}"
    MIGRATE_SCHEMA="public"
  fi
  echo -e "${GREEN}[DBCTL]${NC} Will migrate migrations file. We will use schema : ${YELLOW}$MIGRATE_SCHEMA${NC}."
  mkdir -p $DB_BLUEPRINT_DIRECTORY/__migrations__/$MIGRATE_SCHEMA
  mkdir -p $DB_BLUEPRINT_DIRECTORY/__migrations__/public
  echo -e "${GREEN}[DBCTL]${NC} Migrate SQL files to --> ${YELLOW}$DB_BLUEPRINT_DIRECTORY/__migrations__/$MIGRATE_SCHEMA/${NC}"
  cp $DB_MIGRATE_BLUEPRINT_DIRECTORY/$DB_ENGINE/local/$DB_NAME/*.sql $DB_BLUEPRINT_DIRECTORY/__migrations__/$MIGRATE_SCHEMA/
    
  local BLUEPRINT_DIRECTORY=$(pwd)/blueprint/infra-devops/dbctl/db
  local BLUEPRINT_DATABASE_FILE=${BLUEPRINT_DIRECTORY}/postgres/${DB_NAME}/${ENVIRONMENT}.yml

  DB_DEPLOYMENT_TYPE=$DB_PROVIDER
  if [[ "$DB_DEPLOYMENT_TYPE" == "local" ]]; then
    DB_DEPLOYMENT_TYPE="hosted"
  fi

  CURRENT_DIRECTORY=$(pwd)
  export IDENTIFIER=${DB_DEPLOYMENT_TYPE}.postgres.${ORGANIZATION}.${TEAM}.${PRODUCT}.${DB_NAME}.${DB_ENVIRONMENT}
  export DB_DIRECTORY=$CURRENT_DIRECTORY/.db/${IDENTIFIER}
  export DB_IMPORT_DIRECTORY=${DB_DIRECTORY}/.import
  mkdir -p ${DB_DIRECTORY}/
  mkdir -p $DB_IMPORT_DIRECTORY/
  mkdir -p $DB_IMPORT_DIRECTORY/rds/

  local CERTS_BUNDLE=dbctl-${DB_ENVIRONMENT}
  echo -e "${GREEN}[DBCTL]${NC} Importing Poneglyph Certificate : [[member]]:${YELLOW}$GITHUB_USERNAME${NC}@[[certs_bundle]]:${YELLOW}$CERTS_BUNDLE${NC}"
  $(./poneglyphctl member certs use $GITHUB_USERNAME $CERTS_BUNDLE)
  echo -e "${GREEN}[DBCTL]${NC} $GITHUB_USERNAME@$CERTS_BUNDLE.crt -> ${YELLOW}$PONEGLYPH_MEMBER_CERT_FILE${NC}"
  echo -e "${GREEN}[DBCTL]${NC} $GITHUB_USERNAME@$CERTS_BUNDLE.key -> ${YELLOW}$PONEGLYPH_MEMBER_KEY_FILE${NC}"
  echo -e "${GREEN}[DBCTL]${NC} $GITHUB_USERNAME@$CERTS_BUNDLE.ca.crt -> ${YELLOW}$PONEGLYPH_MEMBER_CA_CERT_FILE${NC}"
  
  echo -e "${GREEN}[DBCTL]${NC} Identifier : ${YELLOW}$IDENTIFIER${NC}"
  ansible-playbook playbooks/infra-devops/dbctl/dbctl-util-import.yml \
    -e "db_engine=${DB_ENGINE}" \
    -e "db_provider=${DB_PROVIDER}" \
    -e "db_name=${DB_NAME}" \
    -e "db_environment=${DB_ENVIRONMENT}" \
    -e "db_blueprint_directory=${DB_BLUEPRINT_DIRECTORY}" \
    -e "db_bootstrap_file=$DB_BOOTSTRAP_BLUEPRINT_DIRECTORY/$DB_ENGINE/$DB_PROVIDER/$DB_NAME/$DB_ENVIRONMENT.yml" \
    -e "db_deploy_file=$DB_DEPLOY_BLUEPRINT_DIRECTORY/$DB_ENGINE/$DB_PROVIDER/$DB_NAME/$DB_ENVIRONMENT.yml" \
    -e "db_import_directory=${DB_IMPORT_DIRECTORY}" \
    -e "db_import_roles_directory=${DB_BLUEPRINT_DIRECTORY}/__roles__" \
    -e "organization=${ORGANIZATION}" \
    -e "team=${TEAM}" \
    -e "product=${PRODUCT}" \
    -e "dbctl_cert_file=${PONEGLYPH_MEMBER_CERT_FILE}" \
    -e "dbctl_key_file=${PONEGLYPH_MEMBER_KEY_FILE}" \
    -e "dbctl_ca_cert_file=${PONEGLYPH_MEMBER_CA_CERT_FILE}"
  
  if [[ $DB_PROVIDER == "rds" ]]; then
    mkdir -p $DB_IMPORT_DIRECTORY/.bin
    cp ./.bin/terraform $DB_IMPORT_DIRECTORY/.bin/terraform  
    pushd $DB_IMPORT_DIRECTORY
    ./tfimport
    popd
  fi
}

if [ $# == 0 ]; then
    exit 3
fi

if [[ " ${1} " == *"help"* ]] || [[ " ${1} " == *"--help"* ]];then
    exit 3
else
    if [[ -z "$1" ]] || [[ -z "$2" ]] || [[ -z "$3" ]] || [[ -z "$4" ]]; then
        exit 3
    else
        db-util-import-validate $1 $2 $3 $4
        db-util-import-execute $1 $2 $3 $4
    fi
fi
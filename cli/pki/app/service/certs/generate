#!/usr/bin/env bash
set -e
trap "exit" INT

CLUSTER_INVENTORY=$1
SERVICE_CERTS_BLUEPRINT=$2
IS_JAVA=$3

function pki-service-certs-generate-validate {
    local CURRENT_DIRECTORY=$(pwd)
    local BLUEPRINT_DIRECTORY=$CURRENT_DIRECTORY/pki/blueprint/certs/${CLUSTER_INVENTORY}/${SERVICE_CERTS_BLUEPRINT}

    if [[ ! -d "$BLUEPRINT_DIRECTORY" ]]; then
        echo -e "${RED}[ERROR]${NC} Blueprint directory ${YELLOW}${BLUEPRINT_DIRECTORY}${NC} not found."
        exit 1
    fi

    if [[ ! -f "$BLUEPRINT_DIRECTORY/spec.yml" ]]; then
        echo -e "${RED}[ERROR]${NC} Blueprint file ${YELLOW}${BLUEPRINT_DIRECTORY}/spec.yml${NC} not found."
        exit 1
    fi
}

function pki-service-certs-generate-certrc {
    local CERTRC_FILE=$HOME/.certrc
    local CURRENT_DIRECTORY=$(pwd)
    
    echo -e "${GREEN}[PKICTL]${NC} Syncing .certrc... "
    $ANSIBLE_PLAYBOOK pki/playbook/pki-service-certs-generate-certrc.yml \
        -e "certrc_file=${CERTRC_FILE}" \
        --vault-password-file "${CURRENT_DIRECTORY}/vault_password.txt"
}

function generate-csr {
    local CURRENT_DIRECTORY=$(pwd)
    local BLUEPRINT_DIRECTORY=${CURRENT_DIRECTORY}/pki/blueprint/certs/${CLUSTER_INVENTORY}/${SERVICE_CERTS_BLUEPRINT}
    local CSR_DIRECTORY=$1
    local METHOD="generate"

    mkdir -p ${CSR_DIRECTORY}

    echo -e "${GREEN}[PKICTL]${NC} Generating CSR for ${YELLOW}${SERVICE_CERTS_BLUEPRINT}...${NC}"
    $ANSIBLE_PLAYBOOK pki/playbook/pki-service-certs-request.yml \
        -e "blueprint=${SERVICE_CERTS_BLUEPRINT}" \
        -e "blueprint_directory=${BLUEPRINT_DIRECTORY}" \
        -e "csr_directory=${CSR_DIRECTORY}" \
        -e "method=${METHOD}"
}

function pki-service-certs-generate-execute {
    local CERTRC_FILE=$HOME/.certrc
    source ${CERTRC_FILE}

    if [[ ${CLUSTER_INVENTORY} == 'local' ]]; then
        CA_SERVER_ADDRESS="${CA_SERVER_LOCAL}"
    else
        CA_SERVER_ADDRESS="${CA_SERVER_REMOTE}"
    fi

    CSR_DIR=$HOME/certificates/${SERVICE_CERTS_BLUEPRINT} # Change this to reflect actual contract directory
    CSR_FILE=${CSR_DIR}/${SERVICE_CERTS_BLUEPRINT}.csr
    CRT_ARCHIVE_FILE=${CSR_DIR}/${SERVICE_CERTS_BLUEPRINT}.tar.gz

    generate-csr $CSR_DIR

    echo -e "${GREEN}[PKICTL]${NC} Uploading CSR..."
    curl \
        -s \
        -H "X-AUTH-TOKEN: ${AUTH_TOKEN}" \
        -F "csr=@${CSR_FILE}" \
        -F "service_name=${SERVICE_CERTS_BLUEPRINT}" \
        -X POST \
        -o ${CRT_ARCHIVE_FILE}\
        ${CA_SERVER_ADDRESS}/csr

    if ! tar tf ${CRT_ARCHIVE_FILE}  &> /dev/null; then
        echo -e "${RED}[ERROR]${NC} Invalid certificate archive received"
        exit 1
    fi
    
    echo -e ""
    echo -e "${GREEN}[PKICTL]${NC} Unarchiving ${YELLOW}${CRT_ARCHIVE_FILE}${NC}..."
    pushd ${CSR_DIR} > /dev/null
        tar -xzf ${SERVICE_CERTS_BLUEPRINT}.tar.gz
        rm -f ${SERVICE_CERTS_BLUEPRINT}.tar.gz
    popd > /dev/null

    if [[ ${IS_JAVA} == 'java' || ${IS_JAVA} == '--java' ]]; then
        echo -e "${GREEN}[PKICTL]${NC} Installing default-jre for obtaining keytool..."
        
        sudo apt-get -y install default-jre

        echo -e "${GREEN}[PKICTL]${NC} Generating PKCS12 and JKS files..."
        openssl pkcs12 -export \
            -in $CSR_DIR/$SERVICE_CERTS_BLUEPRINT-ca-chain.crt \
            -inkey $CSR_DIR/.private/$SERVICE_CERTS_BLUEPRINT.key \
            -out $CSR_DIR/$SERVICE_CERTS_BLUEPRINT.p12 \
            -passin pass:$DEFAULT_STORE_PASS \
            -passout pass:$DEFAULT_STORE_PASS
    
        keytool -importkeystore -srckeystore $CSR_DIR/$SERVICE_CERTS_BLUEPRINT.p12 -srcstoretype PKCS12 \
            -srcstorepass $DEFAULT_STORE_PASS -deststorepass $DEFAULT_STORE_PASS \
            -destkeypass $DEFAULT_STORE_PASS -destkeystore $CSR_DIR/$SERVICE_CERTS_BLUEPRINT.jks
    fi

    if [[ "${CLUSTER_INVENTORY}" == "local" ]]; then
        local PKI_CERT_DIR=/usr/share/pki/certs/service
        sudo cp -r ${CSR_DIR} ${PKI_CERT_DIR}
    fi
}

if [ $# == 0 ]; then
    exit 3
fi

if [[ " ${1} " == *"help"* ]] || [[ " ${1} " == *"--help"* ]];then
    exit 3
else
    if [[ -z "$1" ]] || [[ -z "$2" ]]; then
        exit 3
    else        
        pki-service-certs-generate-validate
        pki-service-certs-generate-certrc
        pki-service-certs-generate-execute
    fi
fi
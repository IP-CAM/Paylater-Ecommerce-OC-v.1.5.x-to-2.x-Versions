#!/usr/bin/env bash
set -e
trap "exit" INT

YQ=./.bin.pki/yq

function member-certs-get-validate {
    if [[ -z "${GITHUB_USERNAME}" ]]; then
        echo -e "${RED}[ERROR]${NC} No ${YELLOW}GITHUB_USERNAME${NC} environment variable found. Please set it using command ${YELLOW}export GITHUB_USERNAME=<your-github-username>${NC}"
        exit 1
    fi
    
    MEMBER_CRT_GITHUB_REPOSITORY=$($YQ r pki/blueprint/config.yml "pkictl.db.github.member_crt_github_repository")
    if [[ "$MEMBER_CRT_GITHUB_REPOSITORY" == "null" ]]; then
        echo -e "${RED}[ERROR]${NC} Pkictl has not been configured properly to get member certificate. Please create config.yml[${YELLOW}pkictl.db.github.member_crt_github_repository${NC}] in ${YELLOW}pki/blueprint${NC}"
        exit 1
    fi
}

function validate-crt-index {
    MAX_INDEX=$1
    TEST_INDEX=$2
    VALIDATED_CRT_TO_GET=$3

    if [[ $VALIDATED_CRT_TO_GET == *"${TEST_INDEX}"* ]]; then
        echo -e "invalid"
        return 0
    fi

    if [[ ! "${TEST_INDEX}" =~ ^[0-9]+$ ]]; then
        echo -e "invalid"
        return 0
    fi

    if [[ "${TEST_INDEX}" =~ ^0[0-9]+$ ]]; then
        echo -e "invalid"
        return 0
    fi

    if (($TEST_INDEX>=0 && $TEST_INDEX<=$MAX_INDEX)); then
        echo -e "valid"
        return 0
    else
        echo -e "invalid"
        return 0
    fi
}

function validate-pkcs12-pass {
    PKCS12_PASS=$1
    PKCS12_PASS_CONFIRMATION=$2
    if [[ ${PKCS12_PASS} == "" ]]; then
        echo -e "invalid"
        return 0
    elif [[ ${PKCS12_PASS} != ${PKCS12_PASS_CONFIRMATION} ]]; then
        echo -e "invalid"
        return 0
    else 
        echo -e "valid"
        return 0
    fi
}

function member-certs-get-execute {
    local MEMBER=${GITHUB_USERNAME}

    local MEMBER_CRT_GITHUB_REPOSITORY=$($YQ r pki/blueprint/config.yml "pkictl.db.github.member_crt_github_repository")
    local MEMBER_CRT_TARGET_CLONE_DIRECTORY=$HOME/.pkictl/.crt
    local MEMBER_CRT_TARGET_DIRECTORY=/usr/share/pki/certs/member
    rm -rf ${MEMBER_CRT_TARGET_CLONE_DIRECTORY}
    
    echo -e "${GREEN}[PKICTL]${NC} To get certificate, we will need to authenticate you using your GitHub identity and making sure that you are the authorized person to request for the certificate.${NC}"
    echo -e "${GREEN}[PKICTL]${NC} Please use your ${YELLOW}GITHUB_USERNAME${NC} as your GitHub username and your ${YELLOW}GITHUB_PERSONAL_ACCESS_TOKEN${NC} (with ${YELLOW}repo permission${NC}) when prompted to enter Github Password"
    echo -ne "${GREEN}[PKICTL]${NC} Enter ${YELLOW}${MEMBER}${NC} GitHub Token: "
    read -s GITHUB_AUTH_TOKEN
    echo -e ""
    echo -e "${GREEN}[PKICTL]${NC} Getting CRT repository. Cloning Member CRT repository ${YELLOW}${MEMBER_CRT_GITHUB_REPOSITORY}${NC}"

    local AUTO_GITHUB_CRT=$(expect -c "
        set timeout 5
        spawn git clone ${MEMBER_CRT_GITHUB_REPOSITORY} ${MEMBER_CRT_TARGET_CLONE_DIRECTORY}
        expect \"Cloning into '' ...\"
        expect \"Username for 'https://github.com':\"
        send \"${MEMBER}\r\"
        expect \"Password for 'https://${MEMBER}@github.com':\"
        send \"${GITHUB_AUTH_TOKEN}\r\"
        set timeout 10
        expect eof
    ")

    echo "${AUTO_GITHUB_CRT}"
    if [[ ! -d "${MEMBER_CRT_TARGET_CLONE_DIRECTORY}" ]]; then
        echo -e "${RED}[ERROR]${NC} An error occurred when trying to clone the repository: ${YELLOW}${MEMBER_CRT_GITHUB_REPOSITORY}${NC}. Aborting..."
        echo -e "${GREEN}[PKICTL]${NC} Please wait a bit.. Cleaning up..."
        rm -rf ${MEMBER_CRT_TARGET_CLONE_DIRECTORY}
        exit 1
    fi

    IS_CHOOSING_CRT=1
    while [[ $IS_CHOOSING_CRT==1 ]]; do
        echo -e "${GREEN}[PKICTL]${NC} ${YELLOW}Which certificate(s) do you want to get?${NC}"
        echo -e "${GREEN}[PKICTL]${NC} ${YELLOW}=====================================================================${NC}"
        echo -e ""
        CRT_STRINGS=$(ls ${MEMBER_CRT_TARGET_CLONE_DIRECTORY}/${MEMBER} | grep -Po '.*(?<!ca-chain|ca)\.crt' | sed -e 's/\..*$//' | xargs echo)
        IFS=' ' read -ra CRT_LIST <<< $CRT_STRINGS

        for index in "${!CRT_LIST[@]}"
        do
            echo "[$index] ${CRT_LIST[index]}"
        done
        echo -e "[A] Get all certificates"
        echo -e "[C] Cancel"
        echo -e ""
        echo -e "${GREEN}[PKICTL]${NC} ${YELLOW}=====================================================================${NC}"
        echo -e "${GREEN}[PKICTL]${NC} Please type the index number for the next prompted input"
        echo -e "${GREEN}[PKICTL]${NC} For getting mutliple certificates, please separate the index number with comma and without space ${YELLOW}(e.g. 0,1,2)${NC}"
        echo -e "${GREEN}[PKICTL]${NC} You can type ${YELLOW}A${NC} to get all available certificates"
        echo -e "${GREEN}[PKICTL]${NC} You can type ${YELLOW}C${NC} to cancel"
        echo -ne "${GREEN}[PKICTL]${NC} Enter the certificate index that you want to get: "
        read CRT_TO_GET_CHOICE
        
        MAX_INDEX=$((${#CRT_LIST[@]}-1))
        if [[ "$CRT_TO_GET_CHOICE" =~ ^[Aa]$ ]]; then
            for i in $(seq 0 $MAX_INDEX)
            do
                CRT_TO_GET="$CRT_TO_GET,$i"
            done
            CRT_TO_GET="${CRT_TO_GET:1}"
        elif [[ "$CRT_TO_GET_CHOICE" =~ ^[Cc]$ ]]; then
            echo "${GREEN}[PKICTL]${NC} ${YELLOW}Get operation has been cancelled${NC}"
            rm -rf $MEMBER_CRT_TARGET_CLONE_DIRECTORY
            exit 0
        else 
            CRT_TO_GET=$CRT_TO_GET_CHOICE
        fi

        if [[ -z "${CRT_TO_GET}" || "${CRT_TO_GET}" =~ ^[a-zA-Z]+$ ]]; then
            echo "${GREEN}[PKICTL]${NC} ${RED}No certificate to get. Aborting...${NC}"
            rm -rf $MEMBER_CRT_TARGET_CLONE_DIRECTORY
            exit 1
        fi

        echo -e ""
        echo -e "${GREEN}[PKICTL]${NC} ${YELLOW}Certificate(s) to get:${NC}"
        VALIDATED_CRT_TO_GET=""
        IFS=',' read -ra  CRT_INDEX <<< $CRT_TO_GET
        for element in "${CRT_INDEX[@]}"
        do
            IS_INDEX_VALID=$(validate-crt-index $MAX_INDEX $element $VALIDATED_CRT_TO_GET)
            if [[ "$IS_INDEX_VALID" == "valid" ]]; then
                MEMBER_CERT=${CRT_LIST[$element]}
                echo -e "${GREEN}[$element] $MEMBER_CERT${NC}"
                VALIDATED_CRT_TO_GET="$VALIDATED_CRT_TO_GET,$element"
            fi
        done
        echo -ne "${GREEN}[PKICTL]${NC} Are you sure want to get the above certificates (y/N)? "
        read GET_CONFIRMATION
        if [[ $GET_CONFIRMATION =~ ^[Yy]$ ]]; then
            IS_CHOOSING_CRT=0
            break
        fi
        echo -e ""
    done

    PKCS12_PASS=""
    PKCS12_PASS_CONFIRMATION=""
    IS_PKCS12_PASS_VALID=0
    while [[ $IS_PKCS12_PASS_VALID == 0 ]]; do
        echo -ne "${GREEN}[PKICTL]${NC} Please enter a password to protect the browser certificate: "
        read -s PKCS12_PASS
        echo -e ""
        echo -ne "${GREEN}[PKICTL]${NC} Please re-enter the password for confirmation: "
        read -s PKCS12_PASS_CONFIRMATION
        echo -e ""

        if [[ $(validate-pkcs12-pass $PKCS12_PASS $PKCS12_PASS_CONFIRMATION) == 'invalid' ]]; then
            echo -e "${GREEN}[PKICTL]${NC} ${RED}Invalid password!${NC}"
            echo -e "${GREEN}[PKICTL]${NC} ${YELLOW}Password can't be blank and must match${NC}"
        else
            IS_PKCS12_PASS_VALID=1
            break
        fi
    done

    local CURRENT_USER=$(whoami)
    local PKCS12_OUT_DIRECTORY=/home/${CURRENT_USER}/browser-certificates
    IFS=',' read -ra CRT_INDEX <<< ${VALIDATED_CRT_TO_GET:1}
    for element in "${CRT_INDEX[@]}"
    do
        CERT_NAME=${CRT_LIST[element]}
        local REPOSITORY_CRT_FILE=${MEMBER_CRT_TARGET_CLONE_DIRECTORY}/${MEMBER}/${CERT_NAME}.crt
        local REPOSITORY_CA_CRT_FILE=${MEMBER_CRT_TARGET_CLONE_DIRECTORY}/${MEMBER}/${CERT_NAME}.ca.crt
        local REPOSITORY_CRT_CA_CHAIN_FILE=${MEMBER_CRT_TARGET_CLONE_DIRECTORY}/${MEMBER}/${CERT_NAME}-ca-chain.crt
        local CRT_FILE=${MEMBER_CRT_TARGET_DIRECTORY}/${CERT_NAME}/${CERT_NAME}.crt
        local CA_CRT_FILE=${MEMBER_CRT_TARGET_DIRECTORY}/${CERT_NAME}/${CERT_NAME}.ca.crt
        local CRT_CA_CHAIN_FILE=${MEMBER_CRT_TARGET_DIRECTORY}/${CERT_NAME}/${CERT_NAME}-ca-chain.crt

        echo -e "${GREEN}[PKICTL]${NC} Downloading ${CERT_NAME} certificates..."
        sudo mv $REPOSITORY_CRT_FILE $CRT_FILE
        sudo mv $REPOSITORY_CA_CRT_FILE $CA_CRT_FILE
        sudo mv $REPOSITORY_CRT_CA_CHAIN_FILE $CRT_CA_CHAIN_FILE

        local CRT_KEY_FILE=${MEMBER_CRT_TARGET_DIRECTORY}/${CERT_NAME}/.private/${CERT_NAME}.key
        local PKCS12_OUT_FILE=${PKCS12_OUT_DIRECTORY}/${CERT_NAME}.p12
        mkdir -p ${PKCS12_OUT_DIRECTORY}

        echo -e "${GREEN}[PKICTL]${NC} Generating PKCS12 certificate format for ${CERT_NAME} for browser authentication..."
        sudo openssl pkcs12 -export -in ${CRT_CA_CHAIN_FILE} -inkey ${CRT_KEY_FILE} -out ${PKCS12_OUT_FILE} -passin pass:${PKCS12_PASS} -passout pass:${PKCS12_PASS}
        sudo chown ${CURRENT_USER}.${CURRENT_USER} ${PKCS12_OUT_FILE}
        sudo cp ${PKCS12_OUT_FILE} ${MEMBER_CRT_TARGET_DIRECTORY}/${CERT_NAME}/${CERT_NAME}.p12
        sudo chmod 644 ${MEMBER_CRT_TARGET_DIRECTORY}/${CERT_NAME}/${CERT_NAME}.p12
    done

    echo -e "${GREEN}[PKICTL]${NC} Successfully downloaded certificate to:"
    echo -e "${GREEN}[PKICTL]${NC} - .crt Certificates: ${YELLOW}${MEMBER_CRT_TARGET_DIRECTORY}${NC}"
    echo -e "${GREEN}[PKICTL]${NC} - PKCS12 Certificate for browser authentication: ${YELLOW}${PKCS12_OUT_DIRECTORY}${NC}"
    echo -e ""
    echo -e "${GREEN}[PKICTL]${NC} How to install the PKCS12 certificate to browser?"
    echo -e "${GREEN}[PKICTL]${NC} Firefox: https://www.jscape.com/blog/firefox-client-certificate"
    echo -e "${GREEN}[PKICTL]${NC} Chrome: https://support.securly.com/hc/en-us/articles/206081828-How-to-manually-install-the-Securly-SSL-certificate-in-Chrome"
    echo -e ""
    echo -e "${GREEN}[PKICTL]${NC} Please wait a bit.. Cleaning up..."
    rm -rf $MEMBER_CRT_TARGET_CLONE_DIRECTORY
}

if [[ " ${1} " == *"help"* ]] || [[ " ${1} " == *"--help"* ]];then
    exit 3
else
    member-certs-get-validate
    member-certs-get-execute
fi

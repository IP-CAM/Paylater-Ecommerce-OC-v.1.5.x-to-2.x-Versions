#!/usr/bin/env bash
set -e
trap "exit" INT

YQ=./.bin.pki/yq
export PKICTL_DIRECTORY=/usr/share/pki

MEMBER=$1
CLUSTER_INVENTORY=$2
CA_SERVER=$3
CA_TARGET=$4

function member-certs-issue-validate {
    local inventoryFile=~/.host-inventory/inventory.d/${CLUSTER_INVENTORY}
    local CURRENT_DIRECTORY=$(pwd)
    local PKI_DIRECTORY=$PKICTL_DIRECTORY/pki

    if [[ ! -f "${inventoryFile}" ]]; then
        echo -e "${RED}[ERROR]${NC} ${YELLOW}${clusterInventory}${NC} cluster inventory not found. Expected on: ${RED}[${inventoryFile}]${NC}"
        echo -e "Try to run ${YELLOW}./pkictl inventory setup${NC} to setup inventories needed for pkictl"
        exit 1
    fi

    MEMBER_CSR_GITHUB_REPOSITORY=$($YQ r pki/blueprint/config.yml "pkictl.db.github.member_csr_github_repository")
    if [[ "${MEMBER_CSR_GITHUB_REPOSITORY}" == "null" ]]; then
        echo -e "${RED}[ERROR]${NC} Pkictl has not been configured properly to issue member certificate. Please create config.yml[${YELLOW}pkictl.db.github.member_csr_github_repository${NC}] in ${YELLOW}pki/blueprint${NC}"
        exit 1
    fi

    MEMBER_CRT_GITHUB_REPOSITORY=$($YQ r pki/blueprint/config.yml "pkictl.db.github.member_crt_github_repository")
    if [[ "${MEMBER_CRT_GITHUB_REPOSITORY}" == "null" ]]; then
        echo -e "${RED}[ERROR]${NC} Pkictl has not been configured properly to issue member certificate. Please create config.yml[${YELLOW}pkictl.db.github.member_crt_github_repository${NC}] in ${YELLOW}pki/blueprint${NC}"
        exit 1
    fi

    APPROVER_DB_GITHUB_REPOSITORY=$($YQ r pki/blueprint/config.yml "pkictl.db.github.approver_db_github_repository")
    if [[ "${APPROVER_DB_GITHUB_REPOSITORY}" == "null" ]]; then
        echo -e "${RED}[ERROR]${NC} Pkictl has not been configured properly to issue member certificate. Please create config.yml[${YELLOW}pkictl.db.github.approver_db_github_repository${NC}] in ${YELLOW}pki/blueprint${NC}"
        exit 1
    fi

    APPROVER_DB_FILE=$($YQ r pki/blueprint/config.yml "pkictl.db.github.approver_db_file")
    if [[ "${APPROVER_DB_FILE}" == "null" ]]; then
        echo -e "${RED}[ERROR]${NC} Pkictl has not been configured properly to issue member certificate. Please create config.yml[${YELLOW}pkictl.db.github.approver_db_file${NC}] in ${YELLOW}pki/blueprint${NC}"
        exit 1
    fi
}

function validate-approver {
    local GITHUB_AUTH_USERNAME=$1
    local GITHUB_AUTH_TOKEN=$2

    APPROVER_DB_GITHUB_REPOSITORY=$($YQ r pki/blueprint/config.yml "pkictl.db.github.approver_db_github_repository")
    APPROVER_DB_FILE=$($YQ r pki/blueprint/config.yml "pkictl.db.github.approver_db_file")

    APPROVER_DB_TARGET_CLONE_DIRECTORY=$HOME/.pkictl/.approver
    rm -rf $APPROVER_DB_TARGET_CLONE_DIRECTORY

    echo ""
    echo -e "${GREEN}[PKICTL]${NC} Verifying approver list. Cloning approver repository ${YELLOW}${APPROVER_DB_GITHUB_REPOSITORY}${NC}"
    AUTO_GITHUB_APPROVER=$(expect -c "
        set timeout 5
        spawn git clone ${APPROVER_DB_GITHUB_REPOSITORY} ${APPROVER_DB_TARGET_CLONE_DIRECTORY}
        expect \"Cloning into '' ...\"
        expect \"Username for 'https://github.com':\"
        send \"${GITHUB_AUTH_USERNAME}\r\"
        expect \"Password for 'https://${GITHUB_AUTH_USERNAME}@github.com':\"
        send \"${GITHUB_AUTH_TOKEN}\r\"
        set timeout 10
        expect eof
    ")
    echo "$AUTO_GITHUB_APPROVER"

    if [[ ! -f "${APPROVER_DB_TARGET_CLONE_DIRECTORY}/${APPROVER_DB_FILE}" ]]; then
        echo -e "${RED}[ERROR]${NC} An error occurred when trying to verify account ${YELLOW}${GITHUB_AUTH_USERNAME}${NC} permission to issue certificate. Aborting..."
        exit 1
    fi

    APPROVER_USER=$(cat ${APPROVER_DB_TARGET_CLONE_DIRECTORY}/${APPROVER_DB_FILE} | grep -w "${GITHUB_AUTH_USERNAME}")
    if [[ "${APPROVER_USER}" == "" || -z "${APPROVER_USER}" ]]; then
        echo -e "${RED}[ERROR]${NC} An error occurred, account ${YELLOW}${GITHUB_AUTH_USERNAME}${NC} has no permission to issue certificate. Aborting..."
        exit 1
    fi
    
    rm -rf ${APPROVER_DB_TARGET_CLONE_DIRECTORY}
}

function retrieve-csr-repo {
    MEMBER_CSR_GITHUB_REPOSITORY=$1
    MEMBER_CSR_TARGET_CLONE_DIRECTORY=$2
    GITHUB_AUTH_USERNAME=$3
    GITHUB_AUTH_TOKEN=$4

    echo -e "${GREEN}[PKICTL]${NC} Getting CSR request for ${YELLOW}${MEMBER}${NC}. Cloning Member CSR repository ${YELLOW}${MEMBER_CSR_GITHUB_REPOSITORY}${NC}"
    AUTO_GITHUB_CSR=$(expect -c "
        set timeout 5
        spawn git clone ${MEMBER_CSR_GITHUB_REPOSITORY} ${MEMBER_CSR_TARGET_CLONE_DIRECTORY}
        expect \"Cloning into '' ...\"
        expect \"Username for 'https://github.com':\"
        send \"${GITHUB_AUTH_USERNAME}\r\"
        expect \"Password for 'https://${GITHUB_AUTH_USERNAME}@github.com':\"
        send \"${GITHUB_AUTH_TOKEN}\r\"
        set timeout 30
        expect eof
    ")
    echo "${AUTO_GITHUB_CSR}"
}

function retrieve-crt-repo {
    MEMBER_CRT_GITHUB_REPOSITORY=$1
    MEMBER_CRT_TARGET_CLONE_DIRECTORY=$2
    GITHUB_AUTH_USERNAME=$3
    GITHUB_AUTH_TOKEN=$4

    echo -e "${GREEN}[PKICTL]${NC} Getting CRT repository. Cloning Member CRT repository ${YELLOW}${MEMBER_CRT_GITHUB_REPOSITORY}${NC}"
    AUTO_GITHUB_CRT=$(expect -c "
        set timeout 5
        spawn git clone ${MEMBER_CRT_GITHUB_REPOSITORY} ${MEMBER_CRT_TARGET_CLONE_DIRECTORY}
        expect \"Cloning into '' ...\"
        expect \"Username for 'https://github.com':\"
        send \"${GITHUB_AUTH_USERNAME}\r\"
        expect \"Password for 'https://${GITHUB_AUTH_USERNAME}@github.com':\"
        send \"${GITHUB_AUTH_TOKEN}\r\"
        set timeout 30
        expect eof
    ")
    echo "${AUTO_GITHUB_CRT}"
}

function validate-clone-repo {
    MEMBER_CRT_TARGET_CLONE_DIRECTORY=$1
    MEMBER_CSR_TARGET_CLONE_DIRECTORY=$2

    if [[ ! -d "${MEMBER_CRT_TARGET_CLONE_DIRECTORY}/${MEMBER}" ]]; then
        echo -e "${RED}[ERROR]${NC} An error occurred when trying to issue certificate file ${YELLOW}${MEMBER_CRT_TARGET_CLONE_DIRECTORY}${NC} not synchronized properly. Aborting..."
        echo -e "${GREEN}[PKICTL]${NC} Please wait a bit.. Cleaning up..."
        rm -rf ${MEMBER_CRT_TARGET_CLONE_DIRECTORY}
        exit 1
    fi

    if [[ ! -d "${MEMBER_CSR_TARGET_CLONE_DIRECTORY}/${MEMBER}" ]]; then
        echo -e "${RED}[ERROR]${NC} An error occurred when trying to issue certificate file ${YELLOW}${$MEMBER_CSR_TARGET_CLONE_DIRECTORY}${NC} not synchronized properly. Aborting..."
        echo -e "${GREEN}[PKICTL]${NC} Please wait a bit.. Cleaning up..."
        rm -rf ${MEMBER_CSR_TARGET_CLONE_DIRECTORY}
        exit 1
    fi
}

function issue-certificate {
    MEMBER_CERT=$1
    MEMBER_CSR_TARGET_CLONE_DIRECTORY=$2
    MEMBER_CRT_TARGET_CLONE_DIRECTORY=$3
    
    INVENTORY_FILE=~/.host-inventory/inventory.d/${CLUSTER_INVENTORY}
    CURRENT_DIRECTORY=$(pwd)
    
    CSR_FILE=${MEMBER_CSR_TARGET_CLONE_DIRECTORY}/${MEMBER}/${MEMBER_CERT}.csr
    CRT_FILE=${MEMBER_CRT_TARGET_CLONE_DIRECTORY}/${MEMBER}/${MEMBER_CERT}.crt
    CA_CRT_FILE=${MEMBER_CRT_TARGET_CLONE_DIRECTORY}/${MEMBER}/${MEMBER_CERT}.ca.crt
    CRT_CA_CHAIN_FILE=${MEMBER_CRT_TARGET_CLONE_DIRECTORY}/${MEMBER}/${MEMBER_CERT}-ca-chain.crt

    if [[ ! -f "${CSR_FILE}" ]]; then
        echo -e "${RED}[ERROR]${NC} An error occurred when trying to issue certificate file ${YELLOW}${CSR_FILE}${NC} not found. Aborting..."
        exit 1 
    fi

    if [[ "${CLUSTER_INVENTORY}" == "local" ]]; then
        echo -ne "\n${GREEN}[PKICTL]${NC} "
        $ANSIBLE_PLAYBOOK pki/playbook/pki-member-certs-issue.yml \
            -i "${INVENTORY_FILE}" \
            -e "member=${MEMBER}" \
            -e "member_cert=${MEMBER_CERT}" \
            -e "ca_server=${CA_SERVER}" \
            -e "ca_target=${CA_TARGET}" \
            -e "csr=${CSR_FILE}" \
            -e "crt=${CRT_FILE}" \
            -e "ca_crt=${CA_CRT_FILE}" \
            -e "crt_ca_chain=${CRT_CA_CHAIN_FILE}" \
            -e "current_directory=${CURRENT_DIRECTORY}" \
            --ask-become-pass
    else
        $ANSIBLE_PLAYBOOK pki/playbook/pki-member-certs-issue.yml \
            -i "${INVENTORY_FILE}" \
            -e "member=${MEMBER}" \
            -e "member_cert=${MEMBER_CERT}" \
            -e "ca_server=${CA_SERVER}" \
            -e "ca_target=${CA_TARGET}" \
            -e "csr=${CSR_FILE}" \
            -e "crt=${CRT_FILE}" \
            -e "ca_crt=${CA_CRT_FILE}" \
            -e "crt_ca_chain=${CRT_CA_CHAIN_FILE}" \
            -e "current_directory=${CURRENT_DIRECTORY}"
    fi
}

function cleanup-directory {
    echo -e "${GREEN}[PKICTL]${NC} Please wait a bit.. Cleaning up..."
    rm -rf $@
}

function validate-csr-index {
    MAX_INDEX=$1
    TEST_INDEX=$2
    VALIDATED_CSR_TO_SIGN=$3
    if [[ $VALIDATED_CSR_TO_SIGN == *"${TEST_INDEX}"* ]]; then
        echo -e "invalid"
        return 0
    fi

    if [[ ! "${TEST_INDEX}" =~ ^[0-9]+$ ]]; then
        echo -e "invalid"
        return 0
    fi

    if (($TEST_INDEX>=0 && $TEST_INDEX<=$MAX_INDEX)); then
        echo -e "valid"
        return 0
    else
        echo -e "invalid"
        return 0
    fi
}

function member-certs-issue-execute {
    local inventoryFile=~/.host-inventory/inventory.d/${CLUSTER_INVENTORY}
    local CURRENT_DIRECTORY=$(pwd)

    echo -e "${GREEN}[PKICTL]${NC} To issue certificate, we will need to authenticate you using your GitHub identity and making sure that you are the authorized person to issue the certificate.${NC}"
    echo -e "${GREEN}[PKICTL]${NC} Please use your ${YELLOW}GITHUB_USERNAME${NC} as your GitHub username and your ${YELLOW}GITHUB_PERSONAL_ACCESS_TOKEN${NC} (with ${YELLOW}repo permission${NC}) when prompted to enter Github Password"

    echo -ne "${GREEN}[PKICTL]${NC} Enter your GitHub Username: "
    read GITHUB_AUTH_USERNAME
    echo -ne "${GREEN}[PKICTL]${NC} Enter your GitHub Personal Access Token: "
    read -s GITHUB_AUTH_TOKEN

    if [[ "${CA_SERVER}" != "local-ca" ]]; then
        validate-approver $GITHUB_AUTH_USERNAME $GITHUB_AUTH_TOKEN
    else
        echo -e ""
        echo -e "${GREEN}[PKICTL]${NC} Skipping approver validation -- for ${YELLOW}local-ca${NC}"
    fi

    echo -e "${GREEN}[PKICTL]${NC} Issuer: ${YELLOW}${GITHUB_AUTH_USERNAME}${NC}, CA Server: ${YELLOW}$CA_SERVER${NC}"
    echo -e "${GREEN}[PKICTL]${NC} Start issuing certificate..."

    MEMBER_CSR_GITHUB_REPOSITORY=$($YQ r pki/blueprint/config.yml "pkictl.db.github.member_csr_github_repository")
    MEMBER_CRT_GITHUB_REPOSITORY=$($YQ r pki/blueprint/config.yml "pkictl.db.github.member_crt_github_repository")
    MEMBER_CSR_TARGET_CLONE_DIRECTORY=$HOME/.pkictl/.csr
    MEMBER_CRT_TARGET_CLONE_DIRECTORY=$HOME/.pkictl/.crt

    cleanup-directory $MEMBER_CRT_TARGET_CLONE_DIRECTORY $MEMBER_CSR_TARGET_CLONE_DIRECTORY

    retrieve-csr-repo $MEMBER_CSR_GITHUB_REPOSITORY $MEMBER_CSR_TARGET_CLONE_DIRECTORY $GITHUB_AUTH_USERNAME $GITHUB_AUTH_TOKEN
    retrieve-crt-repo $MEMBER_CRT_GITHUB_REPOSITORY $MEMBER_CRT_TARGET_CLONE_DIRECTORY $GITHUB_AUTH_USERNAME $GITHUB_AUTH_TOKEN
    validate-clone-repo $MEMBER_CRT_TARGET_CLONE_DIRECTORY $MEMBER_CSR_TARGET_CLONE_DIRECTORY

    IS_CHOOSING_CSR=1
    while [[ $IS_CHOOSING_CSR == 1 ]]; do
        echo -e "${GREEN}[PKICTL]${NC} ${YELLOW}Which certificate do you want to issue for this member?${NC}"
        echo -e "${GREEN}[PKICTL]${NC} ${YELLOW}=====================================================================${NC}"
        echo -e ""
        CSR_STRINGS=$(ls ${MEMBER_CSR_TARGET_CLONE_DIRECTORY}/${MEMBER}/ | egrep '*csr' | sed -e 's/\..*$//' | xargs echo)
        IFS=' ' read -ra CSR_LIST <<< $CSR_STRINGS

        for index in "${!CSR_LIST[@]}"
        do
            IS_ISSUED=$(find ${MEMBER_CSR_TARGET_CLONE_DIRECTORY}/${MEMBER}/ -type f -name "${CSR_LIST[index]}.crt")
            if [[ -z "${IS_ISSUED}" ]]; then
                echo -e "[$index] ${CSR_LIST[index]} - ${YELLOW}Not yet issued${NC}"
                NOT_YET_ISSUED="$NOT_YET_ISSUED,$index"
            else
                echo -e "[$index] ${CSR_LIST[index]} - ${GREEN}Issued${NC}"
            fi
        done
        if [[ ! -z "${NOT_YET_ISSUED}" ]]; then
            echo -e "[A] Issue all not yet issued certificate(s)"
        fi
        echo -e "[R] Re-issue all"
        echo -e "[C] Cancel"
        echo -e ""
        echo -e "${GREEN}[PKICTL]${NC} ${YELLOW}=====================================================================${NC}"
        echo -e "${GREEN}[PKICTL]${NC} Please type the index number for the next prompted input"
        echo -e "${GREEN}[PKICTL]${NC} For batch issue, please separate the index number with comma and without space ${YELLOW}(e.g. 0,1,2)${NC}"
        echo -e "${GREEN}[PKICTL]${NC} You can type ${YELLOW}A${NC} to issue all CSRs that haven't been signed"
        echo -e "${GREEN}[PKICTL]${NC} You can type ${YELLOW}R${NC} to re-issue all CSRs"
        echo -e "${GREEN}[PKICTL]${NC} You can type ${YELLOW}C${NC} to cancel"
        echo -ne "${GREEN}[PKICTL]${NC} Enter the CSR index that you want to approve: "
        read CSR_TO_SIGN_CHOICE

        MAX_INDEX=$((${#CSR_LIST[@]}-1))
        if [[ "$CSR_TO_SIGN_CHOICE" =~ ^[Rr]$ ]]; then
            for i in $(seq 0 $MAX_INDEX)
            do
                CSR_TO_SIGN="$CSR_TO_SIGN,$i"
            done
            CSR_TO_SIGN="${CSR_TO_SIGN:1}" # Remove trailing comma
        elif [[ "$CSR_TO_SIGN_CHOICE" =~ ^[Aa]$ && ! -z "${NOT_YET_ISSUED}" ]]; then
            CSR_TO_SIGN="${NOT_YET_ISSUED:1}" # Remove trailing comma
        elif [[ "$CSR_TO_SIGN_CHOICE" =~ ^[Cc]$ ]]; then
            echo -e "${GREEN}[PKICTL]${NC} ${YELLOW}Issue operation has been cancelled. Cleaning up...${NC}"
            cleanup-directory $MEMBER_CRT_TARGET_CLONE_DIRECTORY $MEMBER_CSR_TARGET_CLONE_DIRECTORY
            exit 0
        else
            CSR_TO_SIGN=$CSR_TO_SIGN_CHOICE
        fi

        if [[ -z "${CSR_TO_SIGN}" || "${CSR_TO_SIGN}" =~ ^[a-zA-Z]+$ ]]; then
            echo -e "${GREEN}[PKICTL]${NC} ${RED}No CSR to sign. Aborting...${NC}"
            cleanup-directory $MEMBER_CRT_TARGET_CLONE_DIRECTORY $MEMBER_CSR_TARGET_CLONE_DIRECTORY
            exit 1
        fi

        VALIDATED_CSR_TO_SIGN=""
        IFS=',' read -ra  CSR_INDEX <<< $CSR_TO_SIGN
        echo -e ""
        echo -e "${GREEN}[PKICTL]${NC} ${YELLOW}Certificates to issue:${NC}"
        for element in "${CSR_INDEX[@]}"
        do
            IS_INDEX_VALID=$(validate-csr-index $MAX_INDEX $element $VALIDATED_CSR_TO_SIGN)
            if [[ "$IS_INDEX_VALID" == "valid" ]]; then
                MEMBER_CERT=${CSR_LIST[$element]}
                echo -e "${GREEN}[PKICTL]${NC} ${GREEN}[$element] $MEMBER_CERT${NC}"
                VALIDATED_CSR_TO_SIGN="$VALIDATED_CSR_TO_SIGN,$element"
            fi
        done
        echo -e "${GREEN}[PKICTL]${NC} CA server: ${YELLOW}${CA_SERVER}${NC} | CA to use: ${YELLOW}${CA_TARGET}${NC}"
        echo -ne "${GREEN}[PKICTL]${NC} Are you sure want to issue the above certificates (y/N)? "
        read ISSUE_CONFIRMATION
        if [[ $ISSUE_CONFIRMATION =~ ^[Yy]$ ]]; then
            IS_CHOOSING_CSR=0
            break
        fi
        echo -e "\r"
    done

    IFS=',' read -ra CSR_INDEX <<< ${VALIDATED_CSR_TO_SIGN:1}
    for element in "${CSR_INDEX[@]}"
    do
        MEMBER_CERT=${CSR_LIST[$element]}
        echo -e "${GREEN}[PKICTL]${NC} Issuing ${YELLOW}$MEMBER_CERT${NC}..."
        issue-certificate $MEMBER_CERT $MEMBER_CSR_TARGET_CLONE_DIRECTORY $MEMBER_CRT_TARGET_CLONE_DIRECTORY
        SIGNED_MEMBER_CERTS="$SIGNED_MEMBER_CERTS, $MEMBER_CERT"
    done
    SIGNED_MEMBER_CERTS="${SIGNED_MEMBER_CERTS:2}" # Remove trailing comma and space

    pushd ${MEMBER_CRT_TARGET_CLONE_DIRECTORY}
        echo -e "${GREEN}[PKICTL]${NC} Pushing signed certificates: ${YELLOW}${SIGNED_MEMBER_CERTS}${NC} to ${GREEN}${MEMBER_CRT_TARGET_CLONE_DIRECTORY}/${MEMBER}${NC}"
        
        for element in "${CSR_INDEX[@]}"
        do
            MEMBER_CERT=${CSR_LIST[$element]}
            echo -e "${GREEN}[PKICTL]${NC} Adding ${YELLOW}$MEMBER_CERT${NC}..."
            git add ${MEMBER}/${MEMBER_CERT}.crt
            git add ${MEMBER}/${MEMBER_CERT}.ca.crt
            git add ${MEMBER}/${MEMBER_CERT}-ca-chain.crt
        done
        
        git commit -m "[PKICTL] [ISSUE-by:${GITHUB_AUTH_USERNAME}] member.crt.issue: ${SIGNED_MEMBER_CERTS}"
        git push origin master

        if [[ "$?" != "0" ]]; then
            echo -e "${RED}[ERROR]${NC} An error occurred when trying to push CRT result to the repository: ${YELLOW}${MEMBER_CRT_TARGET_CLONE_DIRECTORY}${NC}. Please re-run the script to try again."
            cleanup-directory $MEMBER_CRT_TARGET_CLONE_DIRECTORY $MEMBER_CSR_TARGET_CLONE_DIRECTORY
            exit 1
        fi
    popd

    cleanup-directory $MEMBER_CRT_TARGET_CLONE_DIRECTORY $MEMBER_CSR_TARGET_CLONE_DIRECTORY
}

if [ $# == 0 ]; then
    exit 3
fi

if [[ " ${1} " == *"help"* ]] || [[ " ${1} " == *"--help"* ]];then
    exit 3
else
    if [[ -z "$1" ]] || [[ -z "$2" ]] || [[ -z "$3" ]] || [[ -z "$4" ]]; then
        exit 3
    else
        member-certs-issue-validate
        member-certs-issue-execute
    fi
fi
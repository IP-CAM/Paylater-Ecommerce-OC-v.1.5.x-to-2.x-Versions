#!/usr/bin/env bash
set -e
trap "exit" INT

YQ=./.bin.pki/yq

YOUR_ORGANIZATION="Cermati"
YOUR_ORGANIZATION_UNIT="Engineering"

function member-certs-request-validate {
    local CURRENT_DIRECTORY=$(pwd)
    local BLUEPRINT_DIRECTORY=$CURRENT_DIRECTORY/pki/blueprint/certs-bundle

    if [[ -z "${GITHUB_USERNAME}" ]]; then
        echo -e "${RED}[ERROR]${NC} No ${YELLOW}GITHUB_USERNAME${NC} environment variable found. Please set it using command ${YELLOW}export GITHUB_USERNAME=<your-github-username>${NC}"
        exit 1
    fi

    if [[ ! -d "$BLUEPRINT_DIRECTORY" ]]; then
        echo -e "${RED}[ERROR]${NC} Blueprint directory ${YELLOW}${BLUEPRINT_DIRECTORY}${NC} not found."
        exit 1
    fi

    MEMBER_CSR_GITHUB_REPOSITORY=$($YQ r pki/blueprint/config.yml "pkictl.db.github.member_csr_github_repository")
    if [[ "$MEMBER_CSR_GITHUB_REPOSITORY" == "null" ]]; then
        echo -e "${RED}[ERROR]${NC} Pkictl has not been configured properly to request member certificate. Please create config.yml[${YELLOW}pkictl.db.github.member_csr_github_repository${NC}] in ${YELLOW}pki/blueprint${NC}"
        exit 1
    fi
}

function validate-bundle-index {
    MAX_INDEX=$1
    TEST_INDEX=$2
    VALIDATED_BUNDLE_TO_REQUEST=$3

    if [[ $VALIDATED_BUNDLE_TO_REQUEST == *"${TEST_INDEX}"* ]]; then
        echo -e "invalid"
        return 0
    fi

    if [[ ! "${TEST_INDEX}" =~ ^[0-9]+$ ]]; then
        echo -e "invalid"
        return 0
    fi

    if [[ "${TEST_INDEX}" =~ ^0[0-9]+$ ]]; then
        echo -e "invalid"
        return 0
    fi

    if (($TEST_INDEX>=0 && $TEST_INDEX<=$MAX_INDEX)); then
        echo -e "valid"
        return 0
    else
        echo -e "invalid"
        return 0
    fi
}

function member-certs-request-execute {
    local CURRENT_DIRECTORY=$(pwd)
    local BLUEPRINT_DIRECTORY=$CURRENT_DIRECTORY/pki/blueprint/certs-bundle
    local MEMBER=${GITHUB_USERNAME}
    local DEVICE_IDENTIFIER=$(cat /etc/machine-id)

    # Use Github as backend
    TARGET_GITHUB_CLONE_DIRECTORY=$HOME/.pkictl/.csr
    rm -rf $TARGET_GITHUB_CLONE_DIRECTORY
    echo -e "${GREEN}[PKICTL]${NC} To request certificate, we will need to authenticate you using your GitHub identity and making sure that you are the authorized person to request for the certificate.${NC}"
    echo -e "${GREEN}[PKICTL]${NC} Please use your ${YELLOW}GITHUB_USERNAME${NC} as your GitHub username and your ${YELLOW}GITHUB_PERSONAL_ACCESS_TOKEN${NC} (with ${YELLOW}repo permission${NC}) when prompted to enter Github Password"
    
    MEMBER_CSR_GITHUB_REPOSITORY=$($YQ r pki/blueprint/config.yml "pkictl.db.github.member_csr_github_repository")
    echo -e "${GREEN}[PKICTL]${NC} Cloning: ${YELLOW}${TARGET_GITHUB_CLONE_DIRECTORY}${NC}"
    echo -ne "${GREEN}[PKICTL]${NC} Enter ${YELLOW}${MEMBER}${NC} GitHub Personal Access Token: "
    read -s GITHUB_AUTH_TOKEN
    echo -e ""
    echo -e "${GREEN}[PKICTL]${NC} Getting CSR repository. Cloning Member CSR repository ${YELLOW}${MEMBER_CSR_GITHUB_REPOSITORY}${NC}"
    AUTO_GITHUB_CSR=$(expect -c "
        set timeout 5
        spawn git clone $MEMBER_CSR_GITHUB_REPOSITORY $TARGET_GITHUB_CLONE_DIRECTORY
        expect \"Cloning into '' ...\"
        expect \"Username for 'https://github.com':\"
        send \"${MEMBER}\r\"
        expect \"Password for 'https://$MEMBER@github.com':\"
        send \"${GITHUB_AUTH_TOKEN}\r\"
        set timeout 10
        expect eof
    ")

    echo "$AUTO_GITHUB_CSR"
    if [[ ! -d "$TARGET_GITHUB_CLONE_DIRECTORY" ]]; then
        echo -e "${RED}[ERROR]${NC} An error occurred when trying to clone the repository: ${YELLOW}${MEMBER_CSR_GITHUB_REPOSITORY}${NC}. Aborting..."
        echo -e "${GREEN}[PKICTL]${NC} Please wait a bit.. Cleaning up..."
        rm -rf $TARGET_GITHUB_CLONE_DIRECTORY
        exit 1
    fi

    mkdir -p ${TARGET_GITHUB_CLONE_DIRECTORY}/${MEMBER}

    IS_CHOOSING_BLUEPRINT=1
    while [[ $IS_CHOOSING_BLUEPRINT == 1 ]]; do
        echo -e "${GREEN}[PKICTL]${NC} ${YELLOW}Which certificate bundle do you want to request?${NC}"
        echo -e "${GREEN}[PKICTL]${NC} ${YELLOW}=====================================================================${NC}"
        echo -e ""
        BUNDLES=$(ls $BLUEPRINT_DIRECTORY | sed -e 's/\..*$//' | xargs echo)
        IFS=' ' read -ra BUNDLE_LIST <<< $BUNDLES

        for index in "${!BUNDLE_LIST[@]}"
        do
            echo "[$index] ${BUNDLE_LIST[index]}"
        done
        echo -e "[A] Request all bundles"
        echo -e "[C] Cancel"
        echo -e ""
        echo -e "${GREEN}[PKICTL]${NC} ${YELLOW}=====================================================================${NC}"
        echo -e "${GREEN}[PKICTL]${NC} Please type the index number for the next prompted input"
        echo -e "${GREEN}[PKICTL]${NC} For requesting mutliple certificate bundles, please separate the index number with comma and without space ${YELLOW}(e.g. 0,1,2)${NC}"
        echo -e "${GREEN}[PKICTL]${NC} You can type ${YELLOW}A${NC} to request all available certificate bundles"
        echo -e "${GREEN}[PKICTL]${NC} You can type ${YELLOW}C${NC} to cancel"
        echo -ne "${GREEN}[PKICTL]${NC} Enter the certificate bundle index that you want to request: "
        read BUNDLE_TO_REQUEST_CHOICE

        MAX_INDEX=$((${#BUNDLE_LIST[@]}-1))
        if [[ "$BUNDLE_TO_REQUEST_CHOICE" =~ ^[Aa]$ ]]; then
            for i in $(seq 0 $MAX_INDEX)
            do
                BUNDLE_TO_REQUEST="$BUNDLE_TO_REQUEST,$i"
            done
            BUNDLE_TO_REQUEST="${BUNDLE_TO_REQUEST:1}"
        elif [[ "$BUNDLE_TO_REQUEST_CHOICE" =~ ^[Cc]$ ]]; then
            echo "${GREEN}[PKICTL]${NC} ${YELLOW}Request operation has been cancelled${NC}"
            rm -rf $TARGET_GITHUB_CLONE_DIRECTORY
            exit 0
        else 
            BUNDLE_TO_REQUEST=$BUNDLE_TO_REQUEST_CHOICE
        fi

        if [[ -z "${BUNDLE_TO_REQUEST}" || "${BUNDLE_TO_REQUEST}" =~ ^[a-zA-Z]+$ ]]; then
            echo "${GREEN}[PKICTL]${NC} ${RED}No certificate bundle to request. Aborting...${NC}"
            rm -rf $TARGET_GITHUB_CLONE_DIRECTORY
            exit 1
        fi

        echo -e ""
        echo -e "${GREEN}[PKICTL]${NC} ${YELLOW}Certificate bundle(s) to request:${NC}"
        VALIDATED_BUNDLE_TO_REQUEST=""
        IFS=',' read -ra  BUNDLE_INDEX <<< $BUNDLE_TO_REQUEST
        for element in "${BUNDLE_INDEX[@]}"
        do
            IS_INDEX_VALID=$(validate-bundle-index $MAX_INDEX $element $VALIDATED_BUNDLE_TO_REQUEST)
            if [[ "$IS_INDEX_VALID" == "valid" ]]; then
                MEMBER_CERT=${BUNDLE_LIST[$element]}
                echo -e "${GREEN}[PKICTL]${NC} ${GREEN}[$element] $MEMBER_CERT${NC}"
                VALIDATED_BUNDLE_TO_REQUEST="$VALIDATED_BUNDLE_TO_REQUEST,$element"
            fi
        done
        echo -ne "${GREEN}[PKICTL]${NC} Are you sure want to request the above certificate bundles (y/N)? "
        read REQUEST_CONFIRMATION
        if [[ $REQUEST_CONFIRMATION =~ ^[Yy]$ ]]; then
            IS_CHOOSING_BLUEPRINT=0
            break
        fi
        echo -e ""
    done
    
    IS_FILLING_DETAILS=1
    while [[ $IS_FILLING_DETAILS == 1 ]]; do
        echo -e ""
        echo -e "${GREEN}[PKICTL]${NC} ${YELLOW}We need you to provide the following informations before continuing${NC}"
        echo -e "${GREEN}[PKICTL]${NC} ${YELLOW}=====================================================================${NC}"
        echo -ne "${GREEN}[PKICTL]${NC} Enter your email: "
        read YOUR_EMAIL
        echo -ne "${GREEN}[PKICTL]${NC} Enter your organization (default: ${YELLOW}Cermati${NC}): "
        read YOUR_ORGANIZATION_INPUT
        echo -ne "${GREEN}[PKICTL]${NC} Enter your organization unit / department / team (default: ${YELLOW}Engineering${NC}): "
        read YOUR_ORGANIZATION_UNIT_INPUT
        echo -ne "${GREEN}[PKICTL]${NC} Enter your SUDO password: "
        read -s YOUR_SUDO_PASS

        if [[ ! -z "${YOUR_ORGANIZATION_INPUT}" ]]; then
            YOUR_ORGANIZATION=${YOUR_ORGANIZATION_INPUT}
        fi

        if [[ ! -z "${YOUR_ORGANIZATION_UNIT_INPUT}" ]]; then
            YOUR_ORGANIZATION_UNIT=${YOUR_ORGANIZATION_UNIT_INPUT}
        fi

        echo -e ""
        echo -e ""
        echo -e "${GREEN}[PKICTL]${NC} Your personal details:"
        echo -e "${GREEN}[PKICTL]${NC} Email address: ${GREEN}${YOUR_EMAIL}${NC}"
        echo -e "${GREEN}[PKICTL]${NC} Organization: ${GREEN}${YOUR_ORGANIZATION}${NC}"
        echo -e "${GREEN}[PKICTL]${NC} Organization Unit/Department/Team: ${GREEN}${YOUR_ORGANIZATION_UNIT}${NC}"
        echo -ne "${GREEN}[PKICTL]${NC} Are the above details correct (y/N)? "
        read DETAILS_CONFIRMATION
        if [[ $DETAILS_CONFIRMATION =~ ^[Yy]$ ]]; then
            IS_FILLING_DETAILS=0
            break
        fi
        echo -e ""
    done

    IFS=',' read -ra BUNDLE_INDEX <<< ${VALIDATED_BUNDLE_TO_REQUEST:1}
    for element in "${BUNDLE_INDEX[@]}"
    do
        BLUEPRINT=${BUNDLE_LIST[$element]}
        echo -e "${GREEN}[PKICTL]${NC} Generating csr for ${YELLOW}${BLUEPRINT}${NC}"
        $ANSIBLE_PLAYBOOK pki/playbook/pki-member-certs-request.yml \
        -e "ansible_sudo_pass=${YOUR_SUDO_PASS}" \
        -e "member=${MEMBER}" \
        -e "email='${YOUR_EMAIL}'" \
        -e "organization='${YOUR_ORGANIZATION}'" \
        -e "organization_unit='${YOUR_ORGANIZATION_UNIT}'" \
        -e "device_identifier=${DEVICE_IDENTIFIER}" \
        -e "blueprint=${BLUEPRINT}" \
        -e "blueprint_directory=${BLUEPRINT_DIRECTORY}"
    
        CSR_FILE=/usr/share/pki/certs/member/${MEMBER}@${DEVICE_IDENTIFIER}@${BLUEPRINT}/${MEMBER}@${DEVICE_IDENTIFIER}@${BLUEPRINT}.csr

        cp ${CSR_FILE} ${TARGET_GITHUB_CLONE_DIRECTORY}/${MEMBER}/${MEMBER}@${DEVICE_IDENTIFIER}@${BLUEPRINT}.csr

        REQUESTED_CERTS="$REQUESTED_CERTS, ${MEMBER}@${DEVICE_IDENTIFIER}@${BLUEPRINT}"
    done

    pushd ${TARGET_GITHUB_CLONE_DIRECTORY}
        echo -e "${GREEN}[PKICTL]${NC} Pushing: ${YELLOW}member.csr.request: ${REQUESTED_CERTS:2}${NC} to ${GREEN}${TARGET_GITHUB_CLONE_DIRECTORY}/${MEMBER}${NC}"

        for element in "${BUNDLE_INDEX[@]}"
        do
            BLUEPRINT=${BUNDLE_LIST[$element]}
            echo -e "${GREEN}[PKICTL]${NC} Adding ${YELLOW}${MEMBER}@${DEVICE_IDENTIFIER}@${BLUEPRINT}.csr...${NC}"
            git add ${MEMBER}/${MEMBER}@${DEVICE_IDENTIFIER}@${BLUEPRINT}.csr
        done

        git commit -m "[PKICTL] member.csr.request: ${MEMBER} - ${REQUESTED_CERTS:2}"
        git push origin master

        if [[ "$?" != "0" ]]; then
            echo -e "${RED}[ERROR]${NC} An error occurred when trying to push CSR request to the repository: ${YELLOW}${TARGET_GITHUB_CLONE_DIRECTORY}${NC}. Please re-run the script to try again."
            echo -e "${GREEN}[PKICTL]${NC} Please wait a bit.. Cleaning up..."
            rm -rf ${TARGET_GITHUB_CLONE_DIRECTORY}
            exit 1
        fi
    popd

    echo -e "${GREEN}[PKICTL]${NC} Please wait a bit.. Cleaning up..."
    rm -rf $TARGET_GITHUB_CLONE_DIRECTORY
}

if [[ " ${1} " == *"help"* ]] || [[ " ${1} " == *"--help"* ]];then
    exit 3
else
    member-certs-request-validate
    member-certs-request-execute
fi
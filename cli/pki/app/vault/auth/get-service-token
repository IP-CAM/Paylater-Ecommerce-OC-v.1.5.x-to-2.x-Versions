#!/bin/bash
set -e
trap "exit" INT

source ./pki/app/namespace 

YQ_EXEC=./.bin.pki/yq
VAULT_EXEC=./.bin.pki/vault
CURRENT_DIRECTORY=$(pwd)

function vault-auth-get-service-token-validate {
    if [[ -z "$GITHUB_USERNAME" ]]; then
      echo -e "${RED}[ERROR]${NC} No GITHUB_USERNAME specified. Please export it to your environment variable."
      exit 1
    fi
}

function vault-auth-get-service-token-execute {
    local APPLICATION_NAME=$1
    local ENVIRONMENT=$2

    export IDENTIFIER=${ORGANIZATION}.${TEAM}.${PRODUCT}.${APPLICATION_NAME}
    export RUN_DIRECTORY=$CURRENT_DIRECTORY/.run.pki/project.get.service-token.${IDENTIFIER}
    mkdir -p ${RUN_DIRECTORY}
    
    # Should have AppName & Environment as parameter
    local VAULT_CERTS_BUNDLE="pkictl-${ENVIRONMENT}"
    
    echo -e "${GREEN}[PKICTL]${NC} Importing PKI Certificate for Vault : [[member]]:${YELLOW}$GITHUB_USERNAME${NC}@[[certs_bundle]]:${YELLOW}$VAULT_CERTS_BUNDLE${NC}"
    $(./pkictl member certs use $VAULT_CERTS_BUNDLE)
    local VAULT_CERT_FILE=$PKICTL_MEMBER_CERT_FILE
    local VAULT_KEY_FILE=$PKICTL_MEMBER_KEY_FILE
    local VAULT_CA_CERT_FILE=$PKICTL_MEMBER_CA_CERT_FILE
    
    local VAULT_LOGIN_CONTEXT=${ORGANIZATION}-${TEAM}-${PRODUCT}-${ENVIRONMENT}
    ./pkictl vault context login cert $VAULT_LOGIN_CONTEXT 
    $(./pkictl vault context get)
    
    export VAULT_CACERT=$VAULT_CA_CERT_FILE
    export VAULT_CLIENT_CERT=$VAULT_CERT_FILE
    export VAULT_CLIENT_KEY=$VAULT_KEY_FILE
    export VAULT_TOKEN=$PKICTL_CONTEXT_TOKEN

    # Hard code first
    if [[ "$ENVIRONMENT" == "dev" ]]; then
        export VAULT_ADDR="https://localhost:8200"
    else
        export VAULT_ADDR="https://vault.cermati.com:8443"
    fi
    
    mkdir -p $RUN_DIRECTORY/.bin.pki
    cp -r ./.bin.pki $RUN_DIRECTORY
    pushd $RUN_DIRECTORY
    $VAULT_EXEC auth list -format=yaml > vault.auth.list.yaml
    
    export APPROLE_AUTH_METHOD_IDENTIFIER_PATH=v1.1/${ORGANIZATION}/${TEAM}/${PRODUCT}/${ENVIRONMENT}
    APPROLE_AUTH_METHOD=$($YQ_EXEC r vault.auth.list.yaml "[${APPROLE_AUTH_METHOD_IDENTIFIER_PATH}/]")
    if [[ $APPROLE_AUTH_METHOD == "null" ]]; then
        echo -e "${GREEN}[PKICTL]${NC} Enabling auth method - ${APPROLE_AUTH_METHOD_IDENTIFIER_PATH}"
        $VAULT_EXEC auth enable -path=${APPROLE_AUTH_METHOD_IDENTIFIER_PATH} approle
    fi
    echo -e "${GREEN}[PKICTL]${NC} Auth Method - ${APPROLE_AUTH_METHOD_IDENTIFIER_PATH} has been enabled."
    $VAULT_EXEC auth list | grep ${APPROLE_AUTH_METHOD_IDENTIFIER_PATH}
    
    export APPROLE_AUTH_PATH=auth/v1.1/${ORGANIZATION}/${TEAM}/${PRODUCT}/${ENVIRONMENT}
    echo -e "${GREEN}[PKICTL]${NC} Configuring role for ${APPLICATION_NAME} - ${APPROLE_AUTH_PATH}/role/${APPLICATION_NAME}"
    $VAULT_EXEC write $APPROLE_AUTH_PATH/role/${APPLICATION_NAME} \
        period=24h \
        policies="${VAULT_LOGIN_CONTEXT}"

    echo -e "${GREEN}[PKICTL]${NC} Read ROLE_ID for $APPLICATION_NAME - ${APPROLE_AUTH_PATH}/role/${APPLICATION_NAME}"
    $VAULT_EXEC read $APPROLE_AUTH_PATH/role/$APPLICATION_NAME/role-id -format=yaml > vault.role-id.yaml
    ROLE_ID=$($YQ_EXEC r vault.role-id.yaml "data.role_id")
    
    echo -e "${GREEN}[PKICTL]${NC} Write ROLE_ID for ${APPLICATION_NAME} - ${APPROLE_AUTH_PATH}/role/${APPLICATION_NAME}"
    $VAULT_EXEC write -f $APPROLE_AUTH_PATH/role/${APPLICATION_NAME}/secret-id -format=yaml > vault.secret-id.yaml
    SECRET_ID=$($YQ_EXEC r vault.secret-id.yaml "data.secret_id")
    SECRET_ID_ACCESSOR=$($YQ_EXEC r vault.secret-id.yaml "data.secret_id_accessor")

    # echo -e "${GREEN}[PKICTL]${NC} ${APPLICATION_NAME} ${YELLOW}ROLE_ID${NC}=${ROLE_ID}"
    # echo -e "${GREEN}[PKICTL]${NC} ${APPLICATION_NAME} ${YELLOW}SECRET_ID${NC}=${SECRET_ID}"
    # echo -e "${GREEN}[PKICTL]${NC} ${APPLICATION_NAME} ${YELLOW}SECRET_ID_ACCESSOR${NC}=${SECRET_ID_ACCESSOR}"

    echo -e "${GREEN}[PKICTL]${NC} Getting service token for - ${APPLICATION_NAME}"
    $VAULT_EXEC write $APPROLE_AUTH_PATH/login -format=yaml role_id=$ROLE_ID secret_id=$SECRET_ID > vault.service-token.yaml
    SERVICE_TOKEN=$($YQ_EXEC r vault.service-token.yaml "auth.client_token")
    $VAULT_EXEC write $APPROLE_AUTH_PATH/role/$APPLICATION_NAME/secret-id/destroy secret_id=${SECRET_ID}
    echo -e "${GREEN}[PKICTL]${NC} $APPLICATION_NAME -> ${YELLOW}SERVICE_TOKEN${NC}=${SERVICE_TOKEN}"
    echo "${SERVICE_TOKEN}" > $PROJECT_DIRECTORY/.vault.token.${APPLICATION_NAME}.$ENVIRONMENT
    echo 
    popd
    rm -rf $RUN_DIRECTORY
}

if [ $# == 0 ]; then
    exit 3
fi

if [[ " ${1} " == *"help"* ]] || [[ " ${1} " == *"--help"* ]];then
    exit 3
else
    if [[ -z "$1" ]] || [[ -z "$2" ]]; then
        exit 3
    else
        vault-auth-get-service-token-validate $1 $2
        vault-auth-get-service-token-execute $1 $2
    fi
fi
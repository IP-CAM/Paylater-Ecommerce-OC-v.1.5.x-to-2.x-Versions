#!/usr/bin/env bash
set -e
trap "exit" INT

function vault-init-validate {
    local clusterInventory=$1
    local blueprint=$2
    local inventoryFile=~/.host-inventory/inventory.d/${clusterInventory}
    local clusterBlueprintDirectory=./pki/blueprint/vault/${clusterInventory}
    local clusterSpecBlueprintDirectory=./pki/blueprint/vault/${clusterInventory}/${blueprint}

    if [[ ! -f "${inventoryFile}" ]]; then
        echo -e "${RED}[ERROR]${NC} ${YELLOW}${clusterInventory}${NC} cluster inventory not found. Expected on: ${RED}[${inventoryFile}]${NC}"
        echo -e "Try to run ${YELLOW}./pkictl inventory setup${NC} to setup inventories needed for pkictl"
        exit 1
    fi

    if [[ ! -d "${clusterBlueprintDirectory}" ]]; then
        echo -e "${RED}[ERROR]${NC} ${YELLOW}${clusterBlueprintDirectory}${NC} cluster blueprint inventory not found in blueprint folder. Expected on: ${RED}[${clusterBlueprintDirectory}]${NC}"
        exit 1
    fi

    if [[ ! -d "${clusterSpecBlueprintDirectory}" ]]; then
        echo -e "${RED}[ERROR]${NC} ${YELLOW}${clusterSpecBlueprintDirectory}${NC} cluster spec blueprint inventory not found in blueprint folder. Expected on: ${RED}[${clusterSpecBlueprintDirectory}]${NC}"
        exit 1
    fi
}

function vault-init-execute {
    local clusterInventory=$1
    local blueprint=$2
    local inventoryFile=~/.host-inventory/inventory.d/${clusterInventory}
    local currentDirectory=$(pwd)
    local blueprintDirectory=${currentDirectory}/pki/blueprint
    local blueprintFile=${currentDirectory}/pki/blueprint/vault/${clusterInventory}/${blueprint}/spec.yml
    local contextDirectory=$HOME/.pkictl
    
    if [[ "${clusterInventory}" == "local" ]]; then
        mkdir -p $contextDirectory
        mkdir -p $contextDirectory/.login
        echo -ne "${GREEN}[PKICTL]${NC} "
        $ANSIBLE_PLAYBOOK pki/playbook/pki-vault-init.yml \
            -i "${inventoryFile}" \
            -e "blueprint_directory=${blueprintDirectory}" \
            -e "cluster=${clusterInventory}" \
            -e "blueprint=${blueprint}" \
            -e "blueprint_file=${blueprintFile}" \
            -e "context_directory=${contextDirectory}" \
            --ask-become-pass
    else
        $ANSIBLE_PLAYBOOK pki/playbook/pki-vault-init.yml \
            -i "${inventoryFile}" \
            -e "blueprint_directory=${blueprintDirectory}" \
            -e "cluster=${clusterInventory}" \
            -e "blueprint=${blueprint}" \
            -e "blueprint_file=${blueprintFile}" \
            -e "context_directory=${contextDirectory}"
    fi

    local EXIT_CODE=$?;
    if [[ "${EXIT_CODE}" != "0" ]]; then
        if [[ "${EXIT_CODE}" == "2" ]]; then
            echo -e "${RED}Vault ${blueprint} at ${clusterInventory} has been initialized. Aborting...${NC}"
        fi
        exit ${EXIT_CODE}
    fi
}

if [ $# == 0 ]; then
    exit 3
fi

if [[ " ${1} " == *"help"* ]] || [[ " ${1} " == *"--help"* ]];then
    exit 3
else
    if [[ -z "$1" ]] || [[ -z "$2" ]]; then
        exit 3
    else
        echo -e ""
        echo -e "${RED}BEWARE THIS COMMAND WILL CLEAN-UP AND RE-INITIALIZE THE WHOLE VAULT AND ETCD SETUP${NC}"
        echo -e "${RED}PLEASE TAKE CAUTION WHEN INVOKING THIS COMMAND.${NC}"
        read -p "Are you sure (Y/y) for continuing? " -r
        echo -e ""
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            vault-init-validate $1 $2
            vault-init-execute $1 $2
        fi
    fi
fi
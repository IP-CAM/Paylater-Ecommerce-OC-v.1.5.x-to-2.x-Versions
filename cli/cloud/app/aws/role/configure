#!/usr/bin/env bash
set -e
trap "exit" INT

SERVICE_NAME=$1
ENVIRONMENT=$2
ROLE=$3

source ./cloud/app/namespace

yq=./.bin.cloud/yq
pkictl=./pkictl

CURRENT_DIRECTORY=$(pwd)
BLUEPRINT_DIRECTORY=${CURRENT_DIRECTORY}/cloud/blueprint/aws/role
BLUEPRINT_FILE=${BLUEPRINT_DIRECTORY}/${SERVICE_NAME}/${ENVIRONMENT}.yml

function cloud-aws-role-configure-validate {
    if [[ ! -f "${pkictl}" ]]; then
        echo -e "${RED}[ERROR]${NC} ${YELLOW}PKICTL${NC} is needed for this command. Please install it first via BCL install package."
        exit 1
    fi

    if [[ ! -f "${yq}" ]]; then
        echo -e "${RED}[ERROR]${NC} ${YELLOW}YQ${NC} is needed for this command. Please install it first by executing ${YELLOW}./cloudctl setup${NC}."
        exit 1
    fi

    if [[ -z "${GITHUB_USERNAME}" ]]; then
        echo -e "${RED}[ERROR]${NC} No GITHUB_USERNAME specified. Please export it to your environment variable."
        exit 1
    fi

    if [[ ! -f "${BLUEPRINT_FILE}" ]]; then
        echo -e "${RED}[ERROR]${NC} No AWS Vault specificaton file found for ${YELLOW}${SERVICE_NAME}/${ENVIRONMENT}.yml${NC}. [${YELLOW}${BLUEPRINT_FILE}${NC}]"
        exit 1
    fi
}

function execute-vault-role-configure-confirmation {
    local RUNTIME_DIRECTORY=${CURRENT_DIRECTORY}/.run.cloud/${IDENTIFIER}

    echo -e "${YELLOW}CONFIRMATION${NC}"
    echo -e "Are you sure the configured ${YELLOW}AWS_VAULT_ACCESS_KEY${NC} and ${YELLOW}AWS_VAULT_ACCESS_SECRET_KEY${NC} belong to Vault user on ${YELLOW}${TEAM}${NC} AWS account?"
    echo -n "(type 'yes' to proceed): "
    read VAULTVALID
    if [[ "$VAULTVALID" == "yes" ]]; then
      echo -e "${GREEN}Thank you for the confirmation. We'll proceed with the role configuration${NC}"
    else
      exit 1
    fi
}

function execute-vault-role-configure {
    local RUNTIME_DIRECTORY=${CURRENT_DIRECTORY}/.run.cloud/${IDENTIFIER}
    pushd ${RUNTIME_DIRECTORY} > /dev/null
        ./vault-role-configure
    popd > /dev/null
}

function cloud-aws-role-configure-execute {
    local IDENTIFIER=aws.${ORGANIZATION}.${TEAM}.${PRODUCT}.${SERVICE_NAME}.${ENVIRONMENT}
    local RUNTIME_DIRECTORY=${CURRENT_DIRECTORY}/.run.cloud/${IDENTIFIER}
    local BINARY_DIRECTORY=${CURRENT_DIRECTORY}/.bin.cloud

    mkdir -p ${RUNTIME_DIRECTORY}
    cp -r ${BLUEPRINT_FILE} ${RUNTIME_DIRECTORY}/${ENVIRONMENT}.yml

    local VAULT_CERTS_BUNDLE=$($yq r $BLUEPRINT_FILE 'aws.secrets.vault.tls.certs_bundle')
    local VAULT_TLS_ENABLED=$($yq r $BLUEPRINT_FILE 'aws.secrets.vault.tls.enabled')
    local CLOUDCTL_VAULT_CERT_FILE=""
    local CLOUDCTL_VAULT_KEY_FILE=""
    local CLOUDCTL_VAULT_CA_CERT_FILE=""
    
    if [[ "${VAULT_TLS_ENABLED}" == "true" && "${VAULT_CERTS_BUNDLE}" == "null" ]]; then
        echo -e "${RED}[ERROR]${NC} No Vault ${YELLOW}certs_bundle${NC} specified even though TLS is enabled."
        exit 1
    fi

    echo -e "${GREEN}[CLOUDCTL]${NC} Importing certificate bundle for Vault Secrets Manager: ${YELLOW}${GITHUB_USERNAME}${NC} - ${YELLOW}${VAULT_CERTS_BUNDLE}${NC}"
    $($pkictl member certs use $VAULT_CERTS_BUNDLE)
    CLOUDCTL_VAULT_CERT_FILE="$PKICTL_MEMBER_CERT_FILE"
    CLOUDCTL_VAULT_KEY_FILE="$PKICTL_MEMBER_KEY_FILE"
    CLOUDCTL_VAULT_CA_CERT_FILE="$PKICTL_MEMBER_CA_CERT_FILE"

    local VAULT_LOGIN_CONTEXT=${ORGANIZATION}-${TEAM}-${PRODUCT}-${ENVIRONMENT}
    local CLOUDCTL_VAULT_TOKEN=""
    $pkictl vault context login cert $VAULT_LOGIN_CONTEXT
    $($pkictl vault context get)
    CLOUDCTL_VAULT_TOKEN=$PKICTL_CONTEXT_TOKEN

    echo -e "${GREEN}[CLOUDCTL]${NC} Please provide the AWS credentials for Vault"
    echo -ne "${GREEN}[CLOUDCTL]${NC} AWS_VAULT_ACCESS_KEY: "
    read AWS_VAULT_ACCESS_KEY
    echo -ne "${GREEN}[CLOUDCTL]${NC} AWS_VAULT_ACCESS_SECRET_KEY: "
    read -s AWS_VAULT_ACCESS_SECRET_KEY 
    echo -e ""

    $ANSIBLE_PLAYBOOK cloud/playbooks/cloud-aws-role-configure-template.yml \
        -e "service_name=${SERVICE_NAME}" \
        -e "service_environment=${ENVIRONMENT}" \
        -e "binary_directory=${BINARY_DIRECTORY}" \
        -e "runtime_directory=${RUNTIME_DIRECTORY}" \
        -e "vault_role_name=${ROLE}" \
        -e "organization=${ORGANIZATION}" \
        -e "team=${TEAM}" \
        -e "product=${PRODUCT}" \
        -e "cloudctl_vault_cert_file=${CLOUDCTL_VAULT_CERT_FILE}" \
        -e "cloudctl_vault_key_file=${CLOUDCTL_VAULT_KEY_FILE}" \
        -e "cloudctl_vault_ca_cert_file=${CLOUDCTL_VAULT_CA_CERT_FILE}" \
        -e "cloudctl_vault_token=${CLOUDCTL_VAULT_TOKEN}" \
        -e "aws_vault_access_key=${AWS_VAULT_ACCESS_KEY}" \
        -e "aws_vault_access_secret_key=${AWS_VAULT_ACCESS_SECRET_KEY}"
    
    execute-vault-role-configure-confirmation
    execute-vault-role-configure
}

if [[ $# == 0 ]]; then
    exit 3
fi

if [[ "$1" == *"help"* ]] || [[ "$1" == *"--help"* ]]; then
    exit 3
else
    if [[ -z "$1" ]] || [[ -z "$2" ]] || [[ -z "$3" ]]; then
        exit 3
    else
        cloud-aws-role-configure-validate
        cloud-aws-role-configure-execute
    fi
fi
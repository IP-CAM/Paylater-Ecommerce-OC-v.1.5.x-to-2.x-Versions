#!/usr/bin/env bash
VAULT_EXEC={{ binary_directory }}/vault

export AWS_VAULT_ACCESS_KEY={{ aws_vault_access_key }}
export AWS_VAULT_ACCESS_SECRET_KEY={{ aws_vault_access_secret_key }}

export VAULT_ADDR={{ aws.secrets.vault.host }}
{% if aws.secrets.vault.tls.enabled %}
export VAULT_CACERT={{ cloudctl_vault_ca_cert_file }}
export VAULT_CLIENT_CERT={{ cloudctl_vault_cert_file }}
export VAULT_CLIENT_KEY={{ cloudctl_vault_key_file }}
export VAULT_TOKEN={{ cloudctl_vault_token }}
{% endif %}

echo -e "[CLOUDCTL] Checking if Vault secrets engine path has been enabled on {{ aws_identifier_path }}"
$VAULT_EXEC secrets list -format yaml > {{ runtime_directory }}/vault-secrets-path.yml
PATH_EXISTED=$(cat {{ runtime_directory }}/vault-secrets-path.yml | grep {{ aws_identifier_path }})
if [[ "${PATH_EXISTED}" == "null" || -z "${PATH_EXISTED}" ]]; then
    echo -e "[CLOUDCTL] Vault secrets engine path hasn't been enabled yet. Enabling..."
    $VAULT_EXEC secrets enable -path={{ aws_identifier_path }} aws
fi

echo -e "[CLOUDCTL] Configuring Vault connection to AWS..."
$VAULT_EXEC write {{ aws_identifier_path }}/config/root \
        access_key="${AWS_VAULT_ACCESS_KEY}" \
        secret_key="${AWS_VAULT_ACCESS_SECRET_KEY}" \
        region="{{ aws.region }}"

if [[ $? == 0 ]]; then
    echo -e "[CLOUDCTL] Generating Vault Role Configuration script for {{ vault_role_name }} on {{ aws_identifier_path }}/config/root"
    $VAULT_EXEC write {{ aws_identifier_path }}/roles/{{ vault_role_name }} \
                credential_type=assumed_role \
                role_arns=arn:aws:iam::{{ aws.iam_role_id }}:role/{{ aws.base_assume_role_name }}{{ vault_role_name | capitalize}}

else
    echo "[ERROR] Failed configuring Vault connection to AWS. Please make sure the exported credentials is correct and re-execute the role configure script."
    exit 1
fi
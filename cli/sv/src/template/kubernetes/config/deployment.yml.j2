# This file contains simplified Kubernetes deployment definition.
#
# All fields in this file are optional, but some are required to make the
# service functional (e.g. pod.replicas, pod.ports, pod.logging, etc.).
#
# Some fields conform to one of the official Kubernetes API object and will be
# marked accordingly. Reference to said API objects can be viewed here:
#   https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.12/

---
# The `template` section contains simplified Kubernetes deployment definition
template:
  deployment:
    # The `deployment.labels` section contains labels that will be attributed to
    # the deployment. This section conforms to the `labels` object of
    # "ObjectMeta v1 meta" API.
    # labels:
    #   a_custom_deployment_label: this_will_be_overwritten

  pod:
    # The `pod.replicas` section determines the number of pods (analogue of
    # containers or processes in traditional terms) that will be running in a
    # Kubernetes cluster. This section conforms to the `replicas` object of
    # "DeploymentSpec v1 apps" API.
    # replicas: 3

    # The `pod.labels` section contains labels that will be attributed to the
    # pod. This section conforms to the `labels` object of "ObjectMeta v1
    # meta" API.
    # labels:
    #   a_custom_pod_label: pod_label

    # The `pod.requests` section contains specification regarding resource
    # requests. This section conforms to the `requests` object of the
    # "ResourceRequirements v1 core" API. See:
    # https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
    # requests:
    #   cpu: 500m
    #   memory: 512Mi

    # The `pod.ports` section contains list of ports that will be exposed by the
    # pod. Each object in this list conforms to the "ContainerPort v1 core" API.
    ports:
      - name: http-api
        containerPort: 3000

    # The `pod.mainContainer` section contains optional specifications regarding
    # the container that contains the actual service that cannot be expressed
    # using any other fields. This section conforms to the "Container v1 core"
    # API.
    # mainContainer:
    #   env:
    #     - name: AN_ENV
    #       value: A_VALUE

    # The `pod.sidecarContainers` section contains list of additional containers
    # that will be run alongside the main container. Each object of this list
    # sould conform to the "Container v1 core" API.
    # sidecarContainers:
    #   - name: custom-sidecar
    #     image: ubuntu:18.04

    # The `pod.logging` section contains configuration about log shipping
    # that applies to all containers in this pod.
    logging:
      # Which log parser to use. Contact the infra team if your service use
      # different log format. Default is "nodejs_cermati-utils_v1" (the log
      # format outputted by @cermati/cermati-utils/logger Node module)
      # parser: nodejs_cermati-utils_v1

      # Whether to discard the logs generated by this service or not. Must be
      # surrounded by quotation marks. Default is "false".
      # exclude: "false"

      # Logging namespace of this service. Two services sharing the same
      # namespace will have their logs saved in the same Elasticsearch index.
      # Should be prefixed with `service-`. Default value is
      # `service-<organization>-<team>-<product>`
      # namespace: service-your_organization-your_team-your_product

# The `raw` section contains custom configurations that can't be configured
# within the `template` section. Fields defined in this section will be merged
# into the deployment specification generated from the `template` section. This
# section conforms to the "Deployment v1 apps" API.
# raw:
#   metadata:
#     labels:
#       a_custom_deployment_label: deployment_label
#       another_custom_deployment_label: another_deployment_label

#   spec:
#     strategy:
#       type: RollingUpdate
#       rollingUpdate: 
#         maxUnavailable: 0
#         maxSurge: 50%
